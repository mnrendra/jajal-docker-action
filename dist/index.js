#!/usr/bin/env node
"use strict";var w=require("node:process"),v=require("execa"),Q=require("semantic-release"),y=require("node:fs"),P=require("node:path");require("node:child_process");var C=require("node:os"),L=require("nanoid"),Z=require("openpgp"),ee=require("addressparser"),G=require("@actions/core");const te="/github/workspace",re=["alpha","beta","rc"],ne=["docs","style","refactor","perf","test","build","ci","chore","revert"],ie=re.map(e=>({name:e,prerelease:!0})),se=["+([0-9])?(.{+([0-9]),x}).x","main","next",...ie],oe=ne.map(e=>({type:e,release:"patch"})),ae="/action",ce=[["@semantic-release/commit-analyzer",{releaseRules:oe}],"@semantic-release/release-notes-generator",["@semantic-release/npm",{npmPublish:!1}],`${ae}/@mnrendra/semantic-release-plugin-publish-github-action`,"@semantic-release/github"],ge={branches:se,plugins:ce,dryRun:!1,ci:!0},K=async(e=[])=>await v.execa("git",e),I=async(e,t=!1)=>{const r=["config","--get"];t&&r.push("--global"),r.push(e);const{stdout:n}=await K(r);return n==="true"?!0:n==="false"?!1:n},h=async(e,t,r=!1)=>{const n=["config"];r&&n.push("--global"),n.push(e,t),await K(n)},ue="gpg-agent.conf",M=".gnupg",le={WIN32:"win32"},pe=`default-cache-ttl 21600
max-cache-ttl 31536000
allow-preset-passphrase
`,k=async e=>{const{stdout:t}=await v.execa("gpg-connect-agent",[`"${e}"`,"/bye"]);return t},fe=async(e,t)=>{const r=P.join(e,ue);y.writeFileSync(r,t);const n=await k("RELOADAGENT");console.log("susu----------reloadAgent:",n)},$=async(e=[],t={})=>await v.execa("gpg",e,t),Ge=async e=>{const t=["--batch","--yes",e],r=n=>[...t.slice(0,2),n,...t.slice(-1)];await $(r("--delete-secret-keys")),await $(r("--delete-keys"))},de=async(e=[])=>await v.execa("gpgconf",e),m={cwd:w.cwd(),verbose:!1},x=e=>{Object.keys(e).forEach(t=>{m[t]=e[t]})},N=(e,t,r="\x1B[39m")=>e.split(`
`).map(n=>(n=t+n,n=n.endsWith("\r")?n.slice(0,-1)+r+"\r":n+r,n)).join(`
`),A=e=>{m.verbose&&console.log(N(e,"\x1B[90m"))},s=e=>{m.verbose&&console.log(e)},we=e=>{if(typeof e=="function")return e;if(typeof e=="object"&&e!==null&&!Array.isArray(e)&&typeof e.default=="function")return e.default;throw new Error("Invalid module")},H=()=>{const e=w.cwd(),t=m.cwd;e!==t&&(s("---------------- Restore working directory -----------------------"),w.chdir(t),s(`Restore working directory to ${t}.`))},R=(e,t=!1)=>e.split(/\n\r|\r\n|\r|\n/).map(r=>t?r.trim():r),U=e=>{m.verbose&&console.log(N(e,"\x1B[32m"))},ye=e=>{if(e!==void 0){if(typeof e!="string"||e==="")throw new Error("Invalid fingerprint value",{cause:e});return e}},me=(e="local")=>{if(typeof e!="string"||!["global","local"].includes(e))throw new Error("Invalid gitScope value",{cause:e});return e},$e=(e=!1)=>{if(typeof e!="boolean")throw new Error("Invalid gitSignCommit value",{cause:e});return e},Ie=(e=!1)=>{if(typeof e!="boolean"&&(typeof e!="string"||e!=="if-asked"))throw new Error("Invalid gitSignPush value",{cause:e});return e},he=(e=!1)=>{if(typeof e!="boolean")throw new Error("Invalid gitSignTag value",{cause:e});return e},Se=(e=!0)=>{if(typeof e!="boolean")throw new Error("Invalid gitSignUser value",{cause:e});return e},Ee=e=>{if(e!==void 0){if(typeof e!="string"||e==="")throw new Error("Invalid passphrase value",{cause:e});return e}},ve=e=>{if(e===void 0)return;const t=Number(e);if(Number.isNaN(t)||t<1||t>5)throw new Error("Invalid trustLevel value",{cause:e});return e},Pe=(e=!1)=>{if(typeof e!="boolean")throw new Error("Invalid verbose value",{cause:e});return e},Te=e=>{try{return y.statSync(e).isDirectory()}catch{return!1}},_e=(e=".")=>{if(typeof e!="string"||e==="")throw new Error("Invalid workdir value",{cause:e});if(!Te(e))throw new Error(`workdir ${e} is doesn't exist`,{cause:e});return e},be=e=>{if(typeof e!="object"||e===null||Array.isArray(e))throw new Error("Invalid options value",{cause:e});const t=_e(e.workdir),r=Ee(e.passphrase),n=ye(e.fingerprint),i=ve(e.trustLevel),o=me(e.gitScope),c=Se(e.gitSignUser),l=$e(e.gitSignCommit),a=he(e.gitSignTag),g=Ie(e.gitSignPush),f=Pe(e.verbose);return x({...m,verbose:f}),s("---------------- importGPG's options to use ---------------------"),s(`workdir         : ${t}`),s(`passphrase      : ${r}`),s(`fingerprint     : ${n}`),s(`trustLevel      : ${i}`),s(`gitScope        : ${o}`),s(`gitSignUser     : ${c}`),s(`gitSignCommit   : ${l}`),s(`gitSignTag      : ${a}`),s(`gitSignPush     : ${g}`),s(`verbose         : ${f}`),{workdir:t,passphrase:r,fingerprint:n,trustLevel:i,gitScope:o,gitSignUser:c,gitSignCommit:l,gitSignTag:a,gitSignPush:g,verbose:f}},W=e=>{if(m.verbose){const t="\x1B[33m";console.log(N("WARNING:",t)),console.log(N(e,t))}},ke=(e,t)=>e.slice(t.length+1).replace("%3a",":").trim(),F=async()=>{const e=["--list-dirs"],{stdout:t}=await de(e),r=R(t,!0),n={libdir:"",libexecdir:"",datadir:"",homedir:""};return r.forEach(i=>{Object.keys(n).forEach(o=>{const c=o;i.startsWith(`${c}:`)&&(n[c]=ke(i,c))})}),Object.keys(n).forEach(i=>{const o=n[i];if(typeof o!="string"||o==="")throw new Error(`Invalid GPG ${i}`,{cause:o})}),n},Ne=async()=>{const{GNUPGHOME:e,HOME:t,USERPROFILE:r}=w.env;if(typeof e=="string"&&e!=="")return e;if(typeof t=="string"&&t!=="")return P.join(t,M);if(typeof r=="string"&&r!==""&&C.platform()===le.WIN32)return P.join(r,M);const{homedir:n}=await F();return n},Re=async()=>{const e=await Ne();if(e.length===0)throw new Error("Unable to determine GnuPG home directory",{cause:e});return y.existsSync(e)||y.mkdirSync(e,{recursive:!0}),e},Ae=(e,t)=>{let r="",n=!1;const i=R(e,!0);for(const o of i){if(o.startsWith("fpr:")&&o.includes(`:${t}:`)){n=!0;continue}if(o.startsWith("grp:")&&n){r=o.replace(/(grp|:)/g,"").trim();break}}return r},Ue=async e=>{const t=["--batch","--with-colons","--with-keygrip","--list-secret-keys",e],{stdout:r}=await $(t);return Ae(r,e)},Oe=async e=>{const t=["--batch","--with-colons","--with-keygrip","--list-secret-keys",e],{stdout:r}=await $(t),n=R(r,!0),i=[];return n.forEach(o=>{o.startsWith("grp")&&i.push(o.replace(/(grp|:)/g,"").trim())}),i},O=(e,t)=>e.slice(t.length+1).trim(),Ce=async()=>{const e=["--version"],{stdout:t}=await $(e),r=R(t,!0),n={gnupg:"",libgcrypt:""};return r.forEach(i=>{i.startsWith("gpg (GnuPG) ")?n.gnupg=O(i,"gpg (GnuPG)"):i.startsWith("gpg (GnuPG/MacGPG2) ")?n.gnupg=O(i,"gpg (GnuPG/MacGPG2)"):i.startsWith("libgcrypt ")&&(n.libgcrypt=O(i,"libgcrypt"))}),Object.keys(n).forEach(i=>{const o=n[i];if(typeof o!="string"||o==="")throw new Error(`Invalid GPG ${i}`,{cause:o})}),n},Le=e=>e.trimStart().startsWith("---"),j=e=>Le(e)?e:Buffer.from(e,"base64").toString(),Ke=async e=>{const t=j(e),r=await Z.readKey({armoredKey:t}),{user:n}=await r.getPrimaryUser(),i=r.getFingerprint().toUpperCase(),o=r.getKeyID().toHex().toUpperCase(),c=we(ee),{name:l,address:a}=c(n.userID?.userID??"")[0],g=r.getCreationTime();return{digest:i,id:o,name:l,email:a,creationTime:g}},Me=async e=>{const t=P.join(C.tmpdir(),`mnrendra-import-gpg-${L.nanoid()}`),r=y.mkdtempSync(t),n=`${r}/${L.nanoid()}.pgp`,i=j(e);y.writeFileSync(n,i,{mode:384});const o=["--import","--batch","--yes",n],{stdout:c,stderr:l}=await $(o);return l!==""?l:(y.unlinkSync(n),y.rmSync(r),c)},xe=async()=>{const e=await k("KILLAGENT");console.log("susu----------killAgent:",e)},D=async(e,t)=>{const r=Buffer.from(t,"utf8").toString("hex").toUpperCase(),n=await k(`PRESET_PASSPHRASE ${e} -1 ${r}`);console.log("susu----------presetPassphrase:",n);const i=await k(`KEYINFO ${e}`);return console.log("susu----------keyinfo:",i),i},He=async(e,t)=>{const r=["--batch","--no-tty","--command-fd","0","--edit-key",e],n=Buffer.from(`trust
${t}
y
quit
`);await $(r,{input:n})},q="user.signingkey",V="user.name",B="user.email",Y="commit.gpgsign",z="tag.gpgsign",X="push.gpgsign",We=async(e,t,r,{scope:n,signUser:i,signCommit:o,signTag:c,signPush:l})=>{s("---------------- Configuring Git ---------------------------------");const a={scope:"local",userSigningkey:"",commitGpgsign:!1,tagGpgsign:!1,pushGpgsign:!1,userName:"",userEmail:""},g=n==="global";return a.scope=n,s(`scope           : ${a.scope}`),i&&(await h(q,e,g),a.userSigningkey=await I(q,g),s(`user.signingkey : ${a.userSigningkey}`),await h(V,t,g),a.userName=await I(V,g),s(`user.name       : ${a.userName}`),await h(B,r,g),a.userEmail=await I(B,g),s(`user.email      : ${a.userEmail}`)),o&&(await h(Y,`${o}`,g),a.commitGpgsign=await I(Y,g),s(`commit.gpgsign  : ${a.commitGpgsign}`)),c&&(await h(z,`${c}`,g),a.tagGpgsign=await I(z,g),s(`tag.gpgsign     : ${a.tagGpgsign}`)),l!==!1&&(await h(X,`${l}`,g),a.pushGpgsign=await I(X,g),s(`push.gpgsign    : ${a.pushGpgsign}`)),a},Fe=async(e,t,r)=>{const n={gpgHome:"",keygrips:[]};if(r===void 0)return n;const i=await Re();if(await fe(i,pe),n.gpgHome=i,s("---------------- Configuring GnuPG agent -------------------------"),s(`GnuPG home      : ${i}`),t!==void 0){s("---------------- Getting keygrip for fingerprint -----------------");const o=await Ue(t);s(`Presetting passphrase for key ${t} with keygrip ${o}`);const c=await D(o,r);A(c),n.keygrips=[o]}else{s("---------------- Getting keygrips --------------------------------");const o=await Oe(e);for(const c of o){s(`Presetting passphrase for ${c}`);const l=await D(c,r);A(l)}n.keygrips=o}return n},je=async()=>{const e=await Ce(),t=await F(),r={...e,...t};Object.keys(r).forEach(i=>{const o=r[i];if(typeof o!="string"&&o==="")throw new Error(`Invalid GPG ${i} value`,{cause:o})});const n=`${r.gnupg} (libgcrypt ${r.libgcrypt})`;return s("---------------- GnuPG info --------------------------------------"),s(`Version         : ${n}`),s(`Libdir          : ${r.libdir}`),s(`Libexecdir      : ${r.libexecdir}`),s(`Datadir         : ${r.datadir}`),s(`Homedir         : ${r.homedir}`),{...r,version:n}},De=async e=>{const{digest:t,id:r,name:n,email:i,creationTime:o}=await Ke(e);return s("---------------- GPG private key info ----------------------------"),s(`Fingerprint     : ${t}`),s(`KeyID           : ${r}`),s(`Name            : ${n}`),s(`Email           : ${i}`),s(`CreationTime    : ${o.toUTCString()}`),{digest:t,id:r,name:n,email:i,creationTime:o}},qe=async(e,t)=>{s("---------------- Importing GPG private key -----------------------");const r=await Me(e);return s(r),r},Ve=(e,t)=>{s("---------------- Fingerprint to use ------------------------------"),s(t??e)},Be=async(e,t)=>{if(t===void 0)return"";const r=Number(t);if(Number.isNaN(r)||r<1||r>5)throw new Error("Invalid GPG Trust Level value",{cause:t});return s("---------------- Setting key's trust level ----------------------"),await He(e,t),s(`Trust level set to ${t} for ${e}`),`Trust level set to ${t} for ${e}`},Ye=async e=>{const t=w.cwd();x({...m,cwd:t});const r=P.resolve(e);t!==r&&(s("---------------- Change working directory ------------------------"),w.chdir(r),s(`Using ${r} as working directory...`))},ze=async(e,t={})=>{try{if(typeof e!="string"||e==="")throw new Error("Invalid GnuPG private key",{cause:e});const r=be(t),{workdir:n,fingerprint:i,passphrase:o,trustLevel:c}=r;await Ye(n);const l=await je(),a=await De(e),{digest:g,id:f,name:T,email:S}=a;Ve(g,i);const E=await qe(e),_=await Fe(g,i,o);await Be(f,c),U("---------------- Successfully set up GPG key ---------------------");const b={scope:r.gitScope,signUser:r.gitSignUser,signCommit:r.gitSignCommit,signTag:r.gitSignTag,signPush:r.gitSignPush},p=await We(f,T,S,b);U("---------------- Successfully configured Git ---------------------");const J={...l,...a,..._,...p,keyid:f,fingerprint:i??g,log:E,trustLevel:c,gitConfigScope:p.scope,gitUserSigningkey:p.userSigningkey,gitUserName:p.userName,gitUserEmail:p.userEmail,gitCommitGpgsign:p.commitGpgsign,gitTagGpgsign:p.tagGpgsign,gitPushGpgsign:p.pushGpgsign,workdir:w.cwd()};return H(),J}catch(r){throw H(),r instanceof Error?r:new Error("Unknown error",{cause:r})}},Xe=async(e="")=>{if(e.length<=0){A("Primary key fingerprint is not defined. Skipping cleanup.");return}try{s("---------------- Cleaning up GPG key -----------------------------"),s(`Removing key ${e}`),await Ge(e),s("Killing GnuPG agent"),await xe(),U("---------------- Successfully cleaned up GPG key -----------------")}catch(t){const r=t instanceof Error?t.message:"Unknown error";W(r),W(`${t}`)}},d=Object.freeze({WORKDIR:".",GPG_PRIVATE_KEY:void 0,GPG_PASSPHRASE:void 0,GPG_FINGERPRINT:void 0,GPG_TRUST_LEVEL:void 0,GIT_SCOPE:"local",GIT_SIGN_USER:!0,GIT_SIGN_COMMIT:!1,GIT_SIGN_TAG:!1,GIT_SIGN_PUSH:!1,TOKEN:w.env.GITHUB_TOKEN}),u=Object.freeze({WORKDIR:"workdir",GPG_PRIVATE_KEY:"gpg-private-key",GPG_PASSPHRASE:"gpg-passphrase",GPG_FINGERPRINT:"gpg-fingerprint",GPG_TRUST_LEVEL:"gpg-trust-level",GIT_SCOPE:"git-scope",GIT_SIGN_USER:"git-sign-user",GIT_SIGN_COMMIT:"git-sign-commit",GIT_SIGN_TAG:"git-sign-tag",GIT_SIGN_PUSH:"git-sign-push",TOKEN:"token"}),Je=()=>{const e=G.getInput(u.GPG_FINGERPRINT);if(e===void 0||e==="")return d.GPG_FINGERPRINT;if(typeof e!="string")throw new Error(`Invalid ${u.GPG_FINGERPRINT} input`,{cause:e});return e},Qe=()=>{const e=G.getInput(u.GIT_SCOPE);if(e===void 0||e==="")return d.GIT_SCOPE;if(typeof e!="string"||!["global","local"].includes(e))throw new Error(`Invalid ${u.GIT_SCOPE} input`,{cause:e});return e},Ze=()=>{const e=G.getInput(u.GIT_SIGN_COMMIT);if(e===void 0||e==="")return d.GIT_SIGN_COMMIT;if(typeof e=="boolean")return e;switch(e){case"false":return!1;case"true":return!0;default:throw new Error(`Invalid ${u.GIT_SIGN_COMMIT} input`,{cause:e})}},et=()=>{const e=G.getInput(u.GIT_SIGN_PUSH);if(e===void 0||e==="")return d.GIT_SIGN_PUSH;if(typeof e=="boolean")return e;switch(e){case"false":return!1;case"true":return!0;case"if-asked":return"if-asked";default:throw new Error(`Invalid ${u.GIT_SIGN_PUSH} input`,{cause:e})}},tt=()=>{const e=G.getInput(u.GIT_SIGN_TAG);if(e===void 0||e==="")return d.GIT_SIGN_TAG;if(typeof e=="boolean")return e;switch(e){case"false":return!1;case"true":return!0;default:throw new Error(`Invalid ${u.GIT_SIGN_TAG} input`,{cause:e})}},rt=()=>{const e=G.getInput(u.GIT_SIGN_USER);if(e===void 0||e==="")return d.GIT_SIGN_USER;if(typeof e=="boolean")return e;switch(e){case"false":return!1;case"true":return!0;default:throw new Error(`Invalid ${u.GIT_SIGN_USER} input`,{cause:e})}},nt=()=>{const e=G.getInput(u.GPG_PASSPHRASE);if(e===void 0||e==="")return d.GPG_PASSPHRASE;if(typeof e!="string")throw new Error(`Invalid ${u.GPG_PASSPHRASE} input`,{cause:e});return e},it=()=>{const e=G.getInput(u.GPG_PRIVATE_KEY);if(e===void 0||e==="")return d.GPG_PRIVATE_KEY;if(typeof e!="string")throw new Error(`Invalid ${u.GPG_PRIVATE_KEY} input`,{cause:e});return e},st=()=>{const e=G.getInput(u.TOKEN);if(e===void 0||e==="")return d.TOKEN;if(typeof e!="string")throw new Error(`Invalid ${u.TOKEN} input`,{cause:e});return e},ot=()=>{const e=G.getInput(u.GPG_TRUST_LEVEL);if(e===void 0||e==="")return d.GPG_TRUST_LEVEL;const t=Number(e);if(Number.isNaN(t)||t<1||t>5)throw new Error(`Invalid ${u.GPG_TRUST_LEVEL} input`,{cause:e});return t},at=()=>{const e=G.getInput(u.WORKDIR);if(e===void 0||e==="")return d.WORKDIR;if(typeof e!="string")throw new Error(`Invalid ${u.WORKDIR} input`,{cause:e});return e},ct=()=>{const e=Je(),t=Qe(),r=Ze(),n=et(),i=tt(),o=rt(),c=nt(),l=it(),a=st(),g=ot(),f=at();return{fingerprint:e,gitScope:t,gitSignCommit:r,gitSignPush:n,gitSignTag:i,gitSignUser:o,passphrase:c,privateKey:l,token:a,trustLevel:g,workdir:f}},gt=e=>{if(typeof e=="function")return e;if(typeof e=="object"&&e!==null&&!Array.isArray(e)&&typeof e.default=="function")return e.default;throw new Error("Invalid module")},ut=async()=>{await v.execa("git",["config","--global","--add","safe.directory",te]);const{workdir:e,privateKey:t,passphrase:r,fingerprint:n,trustLevel:i,gitScope:o,gitSignUser:c,gitSignCommit:l,gitSignTag:a,gitSignPush:g,token:f}=ct();let T="",S="GitOps Release",E="gitops-release@users.noreply.github.com",_=w.cwd();if(t!==void 0){const p=await ze(t,{workdir:e,passphrase:r,fingerprint:n,trustLevel:i,gitScope:o,gitSignUser:c,gitSignCommit:l,gitSignTag:a,gitSignPush:g,verbose:!0});T=p.digest,S=p.name,E=p.email,_=p.workdir}const b=await gt(Q)(ge,{env:{...w.env,GIT_AUTHOR_NAME:S,GIT_AUTHOR_EMAIL:E,GIT_COMMITTER_NAME:S,GIT_COMMITTER_EMAIL:E,GITHUB_TOKEN:f}});return b!==!1?console.log("release:",b.nextRelease.version):console.warn("failed to release!"),await Xe(T),_};ut().then(e=>{console.log("hasil:",e)}).catch(e=>{throw e instanceof Error?e:new Error("Unknown error")});
