#!/usr/bin/env node
"use strict";var w=require("node:process"),tt=require("semantic-release"),O=require("node:child_process"),T=require("node:os"),$=require("node:fs"),_=require("node:path"),M=require("nanoid"),et=require("openpgp"),rt=require("addressparser"),f=require("@actions/core");const nt=["alpha","beta","rc"],it=["docs","style","refactor","perf","test","build","ci","chore","revert"],st=nt.map(t=>({name:t,prerelease:!0})),ot=["+([0-9])?(.{+([0-9]),x}).x","main","next",...st],at=it.map(t=>({type:t,release:"patch"})),ct=[["@semantic-release/commit-analyzer",{releaseRules:at}],"@semantic-release/release-notes-generator",["@semantic-release/npm",{npmPublish:!1}],"./@mnrendra/semantic-release-plugin-publish-github-action","@semantic-release/github"],gt={branches:ot,plugins:ct,dryRun:!1,ci:!0},h={cwd:w.cwd(),verbose:!1},K=t=>{Object.keys(t).forEach(e=>{h[e]=t[e]})},k=(t,e,r="\x1B[39m")=>t.split(`
`).map(n=>(n=e+n,n=n.endsWith("\r")?n.slice(0,-1)+r+"\r":n+r,n)).join(`
`),U=t=>{h.verbose&&console.log(k(t,"\x1B[90m"))},b=t=>t.replace(/\r/g,"").trim().split(/\n/),R=(t,e=[],r={})=>new Promise((n,i)=>{try{const s=e.length>0?`${t} ${e.join(" ")}`:t;O.exec(s,r,(g,u,a)=>{g!=null&&i(g);const c=u.trim(),p=b(c),G=a.trim(),y=b(G);n({stdout:c,stdoutLines:p,stderr:G,stderrLines:y})})}catch(s){i(s)}}),o=t=>{h.verbose&&console.log(t)},ut=t=>{if(typeof t=="function")return t;if(typeof t=="object"&&t!==null&&!Array.isArray(t)&&typeof t.default=="function")return t.default;throw new Error("Invalid module")},H=()=>{const t=w.cwd(),e=h.cwd;t!==e&&(o("---------------- Restore working directory -----------------------"),w.chdir(e),o(`Restore working directory to ${e}.`))},x=(t,e,r)=>{try{let n=e+t.toString(),i=n.indexOf(T.EOL);for(;i>-1;){const s=n.substring(0,i);typeof r=="function"&&r(s),n=n.substring(i+T.EOL.length),i=n.indexOf(T.EOL)}return n}catch(n){throw n instanceof Error?n:new Error("Unknown error",{cause:n})}},lt=(t,e=[],r={})=>new Promise((n,i)=>{try{const s=O.spawn(t,e,r);let g="";s.stdout.on("data",a=>{g=x(a,g)});let u="";s.stderr.on("data",a=>{u=x(a,u)}),s.on("error",a=>{s.removeAllListeners(),i(a)}),s.on("close",a=>{s.removeAllListeners();const c=u.trim(),p=b(c),G=g.trim(),y=b(G);n({code:a,stdout:c,stdoutLines:p,stderr:G,stderrLines:y})}),r.input!==void 0&&s.stdin.end(r.input)}catch(s){i(s)}}),L=t=>{h.verbose&&console.log(k(t,"\x1B[32m"))},pt=t=>{if(t!==void 0){if(typeof t!="string"||t==="")throw new Error("Invalid fingerprint value",{cause:t});return t}},ft=(t="local")=>{if(typeof t!="string"||!["global","local"].includes(t))throw new Error("Invalid gitScope value",{cause:t});return t},dt=(t=!1)=>{if(typeof t!="boolean")throw new Error("Invalid gitSignCommit value",{cause:t});return t},Gt=(t=!1)=>{if(typeof t!="boolean"&&(typeof t!="string"||t!=="if-asked"))throw new Error("Invalid gitSignPush value",{cause:t});return t},wt=(t=!1)=>{if(typeof t!="boolean")throw new Error("Invalid gitSignTag value",{cause:t});return t},yt=(t=!0)=>{if(typeof t!="boolean")throw new Error("Invalid gitSignUser value",{cause:t});return t},mt=t=>{if(t!==void 0){if(typeof t!="string"||t==="")throw new Error("Invalid passphrase value",{cause:t});return t}},$t=t=>{if(t===void 0)return;const e=Number(t);if(Number.isNaN(e)||e<1||e>5)throw new Error("Invalid trustLevel value",{cause:t});return t},ht=(t=!1)=>{if(typeof t!="boolean")throw new Error("Invalid verbose value",{cause:t});return t},Et=t=>{try{return $.statSync(t).isDirectory()}catch{return!1}},It=(t=".")=>{if(typeof t!="string"||t==="")throw new Error("Invalid workdir value",{cause:t});if(!Et(t))throw new Error(`workdir ${t} is doesn't exist`,{cause:t});return t},St=t=>{if(typeof t!="object"||t===null||Array.isArray(t))throw new Error("Invalid options value",{cause:t});const e=It(t.workdir),r=mt(t.passphrase),n=pt(t.fingerprint),i=$t(t.trustLevel),s=ft(t.gitScope),g=yt(t.gitSignUser),u=dt(t.gitSignCommit),a=wt(t.gitSignTag),c=Gt(t.gitSignPush),p=ht(t.verbose);return K({...h,verbose:p}),o("---------------- importGPG's options to use ---------------------"),o(`workdir         : ${e}`),o(`passphrase      : ${r}`),o(`fingerprint     : ${n}`),o(`trustLevel      : ${i}`),o(`gitScope        : ${s}`),o(`gitSignUser     : ${g}`),o(`gitSignCommit   : ${u}`),o(`gitSignTag      : ${a}`),o(`gitSignPush     : ${c}`),o(`verbose         : ${p}`),{workdir:e,passphrase:r,fingerprint:n,trustLevel:i,gitScope:s,gitSignUser:g,gitSignCommit:u,gitSignTag:a,gitSignPush:c,verbose:p}},W=t=>{if(h.verbose){const e="\x1B[33m";console.log(k("WARNING:",e)),console.log(k(t,e))}},j=async(t=[])=>await R("git",t),E=async(t,e=!1)=>{const r=["config","--get"];e&&r.push("--global"),r.push(t);const{stdout:n}=await j(r);return n==="true"?!0:n==="false"?!1:n},I=async(t,e,r=!1)=>{const n=["config"];r&&n.push("--global"),n.push(t,e),await j(n)},vt="gpg-agent.conf",Pt={RELOADAGENT:"RELOADAGENT"},F=".gnupg",Tt={WIN32:"win32"},_t=`default-cache-ttl 21600
max-cache-ttl 31536000
allow-preset-passphrase
`,A=async t=>{const{stdout:e}=await R(`gpg-connect-agent "${t}" /bye`);return e},bt=async(t,e)=>{const r=_.join(t,vt);$.writeFileSync(r,e),await A(Pt.RELOADAGENT)},S=async(t=[])=>await R("gpg",t),Nt=async t=>{const e=["--batch","--yes",t],r=n=>[...e.slice(0,2),n,...e.slice(-1)];await S(r("--delete-secret-keys")),await S(r("--delete-keys"))},kt=async(t=[])=>await R("gpgconf",t),Rt=(t,e)=>t.slice(e.length+1).replace("%3a",":").trim(),D=async()=>{const{stdoutLines:t}=await kt(["--list-dirs"]),e={libdir:"",libexecdir:"",datadir:"",homedir:""};return t.forEach(r=>{Object.keys(e).forEach(n=>{const i=n;r.startsWith(`${i}:`)&&(e[i]=Rt(r,i))})}),Object.keys(e).forEach(r=>{const n=e[r];if(typeof n!="string"||n==="")throw new Error(`Invalid GPG ${r}`,{cause:n})}),e},At=async()=>{const{GNUPGHOME:t,HOME:e,USERPROFILE:r}=w.env;if(typeof t=="string"&&t!=="")return t;if(typeof e=="string"&&e!=="")return _.join(e,F);if(typeof r=="string"&&r!==""&&T.platform()===Tt.WIN32)return _.join(r,F);const{homedir:n}=await D();return n},Ot=async()=>{const t=await At();if(t.length===0)throw new Error("Unable to determine GnuPG home directory",{cause:t});return $.existsSync(t)||$.mkdirSync(t,{recursive:!0}),t},Ut=(t,e)=>{let r="",n=!1;const i=b(t);for(const s of i){if(s.startsWith("fpr:")&&s.includes(`:${e}:`)){n=!0;continue}if(s.startsWith("grp:")&&n){r=s.replace(/(grp|:)/g,"").trim();break}}return r},Lt=async t=>{const e=["--batch","--with-colons","--with-keygrip","--list-secret-keys",t],{stdout:r}=await S(e);return Ut(r,t)},Ct=async t=>{const e=["--batch","--with-colons","--with-keygrip","--list-secret-keys",t],{stdoutLines:r}=await S(e),n=[];return r.forEach(i=>{i.startsWith("grp")&&n.push(i.replace(/(grp|:)/g,"").trim())}),n},C=(t,e)=>t.slice(e.length+1).trim(),Mt=async()=>{const t=["--version"],{stdoutLines:e}=await S(t),r={gnupg:"",libgcrypt:""};return e.forEach(n=>{n.startsWith("gpg (GnuPG) ")?r.gnupg=C(n,"gpg (GnuPG)"):n.startsWith("gpg (GnuPG/MacGPG2) ")?r.gnupg=C(n,"gpg (GnuPG/MacGPG2)"):n.startsWith("libgcrypt ")&&(r.libgcrypt=C(n,"libgcrypt"))}),Object.keys(r).forEach(n=>{const i=r[n];if(typeof i!="string"||i==="")throw new Error(`Invalid GPG ${n}`,{cause:i})}),r},Kt=t=>t.trimStart().startsWith("---"),q=t=>Kt(t)?t:Buffer.from(t,"base64").toString(),Ht=async t=>{const e=q(t),r=await et.readKey({armoredKey:e}),{user:n}=await r.getPrimaryUser(),i=r.getFingerprint().toUpperCase(),s=r.getKeyID().toHex().toUpperCase(),g=ut(rt),{name:u,address:a}=g(n.userID?.userID??"")[0],c=r.getCreationTime();return{digest:i,id:s,name:u,email:a,creationTime:c}},xt=async t=>{const e=_.join(T.tmpdir(),`mnrendra-import-gpg-${M.nanoid()}`),r=$.mkdtempSync(e),n=`${r}/${M.nanoid()}.pgp`,i=q(t);$.writeFileSync(n,i,{mode:384});const s=["--import","--batch","--yes",n],{stdout:g,stderr:u}=await S(s);return u!==""?u:($.unlinkSync(n),$.rmSync(r),g)},Wt=async()=>{await A("KILLAGENT")},V=async(t,e)=>{const r=Buffer.from(e,"utf8").toString("hex").toUpperCase();return await A(`PRESET_PASSPHRASE ${t} -1 ${r}`),await A(`KEYINFO ${t}`)},jt=async(t=[],e={})=>await lt("gpg",t,e),Ft=async(t,e)=>{const r=["--batch","--no-tty","--command-fd","0","--edit-key",t],n=Buffer.from(`trust
${e}
y
quit
`);await jt(r,{input:n})},B="user.signingkey",Y="user.name",z="user.email",X="commit.gpgsign",J="tag.gpgsign",Q="push.gpgsign",Dt=async(t,e,r,{scope:n,signUser:i,signCommit:s,signTag:g,signPush:u})=>{o("---------------- Configuring Git ---------------------------------");const a={scope:"local",userSigningkey:"",commitGpgsign:!1,tagGpgsign:!1,pushGpgsign:!1,userName:"",userEmail:""},c=n==="global";return a.scope=n,o(`scope           : ${a.scope}`),i&&(await I(B,t,c),a.userSigningkey=await E(B,c),o(`user.signingkey : ${a.userSigningkey}`),await I(Y,e,c),a.userName=await E(Y,c),o(`user.name       : ${a.userName}`),await I(z,r,c),a.userEmail=await E(z,c),o(`user.email      : ${a.userEmail}`)),s&&(await I(X,`${s}`,c),a.commitGpgsign=await E(X,c),o(`commit.gpgsign  : ${a.commitGpgsign}`)),g&&(await I(J,`${g}`,c),a.tagGpgsign=await E(J,c),o(`tag.gpgsign     : ${a.tagGpgsign}`)),u!==!1&&(await I(Q,`${u}`,c),a.pushGpgsign=await E(Q,c),o(`push.gpgsign    : ${a.pushGpgsign}`)),a},qt=async(t,e,r)=>{const n={gpgHome:"",keygrips:[]};if(r===void 0)return n;const i=await Ot();if(await bt(i,_t),n.gpgHome=i,o("---------------- Configuring GnuPG agent -------------------------"),o(`GnuPG home      : ${i}`),e!==void 0){o("---------------- Getting keygrip for fingerprint -----------------");const s=await Lt(e);o(`Presetting passphrase for key ${e} with keygrip ${s}`);const g=await V(s,r);U(g),n.keygrips=[s]}else{o("---------------- Getting keygrips --------------------------------");const s=await Ct(t);for(const g of s){o(`Presetting passphrase for ${g}`);const u=await V(g,r);U(u)}n.keygrips=s}return n},Vt=async()=>{const t=await Mt(),e=await D(),r={...t,...e};Object.keys(r).forEach(i=>{const s=r[i];if(typeof s!="string"&&s==="")throw new Error(`Invalid GPG ${i} value`,{cause:s})});const n=`${r.gnupg} (libgcrypt ${r.libgcrypt})`;return o("---------------- GnuPG info --------------------------------------"),o(`Version         : ${n}`),o(`Libdir          : ${r.libdir}`),o(`Libexecdir      : ${r.libexecdir}`),o(`Datadir         : ${r.datadir}`),o(`Homedir         : ${r.homedir}`),{...r,version:n}},Bt=async t=>{const{digest:e,id:r,name:n,email:i,creationTime:s}=await Ht(t);return o("---------------- GPG private key info ----------------------------"),o(`Fingerprint     : ${e}`),o(`KeyID           : ${r}`),o(`Name            : ${n}`),o(`Email           : ${i}`),o(`CreationTime    : ${s.toUTCString()}`),{digest:e,id:r,name:n,email:i,creationTime:s}},Yt=async(t,e)=>{o("---------------- Importing GPG private key -----------------------");const r=await xt(t);return o(r),r},zt=(t,e)=>{o("---------------- Fingerprint to use ------------------------------"),o(e??t)},Xt=async(t,e)=>{if(e===void 0)return"";const r=Number(e);if(Number.isNaN(r)||r<1||r>5)throw new Error("Invalid GPG Trust Level value",{cause:e});return o("---------------- Setting key's trust level ----------------------"),await Ft(t,e),o(`Trust level set to ${e} for ${t}`),`Trust level set to ${e} for ${t}`},Jt=async t=>{const e=w.cwd();K({...h,cwd:e});const r=_.resolve(t);e!==r&&(o("---------------- Change working directory ------------------------"),w.chdir(r),o(`Using ${r} as working directory...`))},Qt=async(t,e={})=>{try{if(typeof t!="string"||t==="")throw new Error("Invalid GnuPG private key",{cause:t});const r=St(e),{workdir:n,fingerprint:i,passphrase:s,trustLevel:g}=r;await Jt(n);const u=await Vt(),a=await Bt(t),{digest:c,id:p,name:G,email:y}=a;zt(c,i);const v=await Yt(t),N=await qt(c,i,s);await Xt(p,g),L("---------------- Successfully set up GPG key ---------------------");const P={scope:r.gitScope,signUser:r.gitSignUser,signCommit:r.gitSignCommit,signTag:r.gitSignTag,signPush:r.gitSignPush},m=await Dt(p,G,y,P);L("---------------- Successfully configured Git ---------------------");const Z={...u,...a,...N,...m,keyid:p,fingerprint:i??c,log:v,trustLevel:g,gitConfigScope:m.scope,gitUserSigningkey:m.userSigningkey,gitUserName:m.userName,gitUserEmail:m.userEmail,gitCommitGpgsign:m.commitGpgsign,gitTagGpgsign:m.tagGpgsign,gitPushGpgsign:m.pushGpgsign,workdir:w.cwd()};return H(),Z}catch(r){throw H(),r instanceof Error?r:new Error("Unknown error",{cause:r})}},Zt=async(t="")=>{if(t.length<=0){U("Primary key fingerprint is not defined. Skipping cleanup.");return}try{o("---------------- Cleaning up GPG key -----------------------------"),o(`Removing key ${t}`),await Nt(t),o("Killing GnuPG agent"),await Wt(),L("---------------- Successfully cleaned up GPG key -----------------")}catch(e){const r=e instanceof Error?e.message:"Unknown error";W(r),W(`${e}`)}},te=(t,e={})=>new Promise((r,n)=>{try{O.exec(t,e,(i,s,g)=>{i!=null&&n(i),r({stdout:s,stderr:g})})}catch(i){n(i)}}),d=Object.freeze({WORKDIR:".",GPG_PRIVATE_KEY:void 0,GPG_PASSPHRASE:void 0,GPG_FINGERPRINT:void 0,GPG_TRUST_LEVEL:void 0,GIT_SCOPE:"local",GIT_SIGN_USER:!0,GIT_SIGN_COMMIT:!1,GIT_SIGN_TAG:!1,GIT_SIGN_PUSH:!1,TOKEN:w.env.GITHUB_TOKEN}),l=Object.freeze({WORKDIR:"workdir",GPG_PRIVATE_KEY:"gpg-private-key",GPG_PASSPHRASE:"gpg-passphrase",GPG_FINGERPRINT:"gpg-fingerprint",GPG_TRUST_LEVEL:"gpg-trust-level",GIT_SCOPE:"git-scope",GIT_SIGN_USER:"git-sign-user",GIT_SIGN_COMMIT:"git-sign-commit",GIT_SIGN_TAG:"git-sign-tag",GIT_SIGN_PUSH:"git-sign-push",TOKEN:"token"}),ee=()=>{const t=f.getInput(l.GPG_FINGERPRINT);if(t===void 0||t==="")return d.GPG_FINGERPRINT;if(typeof t!="string")throw new Error(`Invalid ${l.GPG_FINGERPRINT} input`,{cause:t});return t},re=()=>{const t=f.getInput(l.GIT_SCOPE);if(t===void 0||t==="")return d.GIT_SCOPE;if(typeof t!="string"||!["global","local"].includes(t))throw new Error(`Invalid ${l.GIT_SCOPE} input`,{cause:t});return t},ne=()=>{const t=f.getInput(l.GIT_SIGN_COMMIT);if(t===void 0||t==="")return d.GIT_SIGN_COMMIT;if(typeof t=="boolean")return t;switch(t){case"false":return!1;case"true":return!0;default:throw new Error(`Invalid ${l.GIT_SIGN_COMMIT} input`,{cause:t})}},ie=()=>{const t=f.getInput(l.GIT_SIGN_PUSH);if(t===void 0||t==="")return d.GIT_SIGN_PUSH;if(typeof t=="boolean")return t;switch(t){case"false":return!1;case"true":return!0;case"if-asked":return"if-asked";default:throw new Error(`Invalid ${l.GIT_SIGN_PUSH} input`,{cause:t})}},se=()=>{const t=f.getInput(l.GIT_SIGN_TAG);if(t===void 0||t==="")return d.GIT_SIGN_TAG;if(typeof t=="boolean")return t;switch(t){case"false":return!1;case"true":return!0;default:throw new Error(`Invalid ${l.GIT_SIGN_TAG} input`,{cause:t})}},oe=()=>{const t=f.getInput(l.GIT_SIGN_USER);if(t===void 0||t==="")return d.GIT_SIGN_USER;if(typeof t=="boolean")return t;switch(t){case"false":return!1;case"true":return!0;default:throw new Error(`Invalid ${l.GIT_SIGN_USER} input`,{cause:t})}},ae=()=>{const t=f.getInput(l.GPG_PASSPHRASE);if(t===void 0||t==="")return d.GPG_PASSPHRASE;if(typeof t!="string")throw new Error(`Invalid ${l.GPG_PASSPHRASE} input`,{cause:t});return t},ce=()=>{const t=f.getInput(l.GPG_PRIVATE_KEY);if(t===void 0||t==="")return d.GPG_PRIVATE_KEY;if(typeof t!="string")throw new Error(`Invalid ${l.GPG_PRIVATE_KEY} input`,{cause:t});return t},ge=()=>{const t=f.getInput(l.TOKEN);if(t===void 0||t==="")return d.TOKEN;if(typeof t!="string")throw new Error(`Invalid ${l.TOKEN} input`,{cause:t});return t},ue=()=>{const t=f.getInput(l.GPG_TRUST_LEVEL);if(t===void 0||t==="")return d.GPG_TRUST_LEVEL;const e=Number(t);if(Number.isNaN(e)||e<1||e>5)throw new Error(`Invalid ${l.GPG_TRUST_LEVEL} input`,{cause:t});return e},le=()=>{const t=f.getInput(l.WORKDIR);if(t===void 0||t==="")return d.WORKDIR;if(typeof t!="string")throw new Error(`Invalid ${l.WORKDIR} input`,{cause:t});return t},pe=()=>{const t=ee(),e=re(),r=ne(),n=ie(),i=se(),s=oe(),g=ae(),u=ce(),a=ge(),c=ue(),p=le();return{fingerprint:t,gitScope:e,gitSignCommit:r,gitSignPush:n,gitSignTag:i,gitSignUser:s,passphrase:g,privateKey:u,token:a,trustLevel:c,workdir:p}},fe=t=>{if(typeof t=="function")return t;if(typeof t=="object"&&t!==null&&!Array.isArray(t)&&typeof t.default=="function")return t.default;throw new Error("Invalid module")},de=async()=>{await te(`git config --global --add safe.directory ${w.cwd()}`);const{workdir:t,privateKey:e,passphrase:r,fingerprint:n,trustLevel:i,gitScope:s,gitSignUser:g,gitSignCommit:u,gitSignTag:a,gitSignPush:c,token:p}=pe();let G="",y="GitOps Release",v="gitops-release@users.noreply.github.com";if(e!==void 0){const P=await Qt(e,{workdir:t,passphrase:r,fingerprint:n,trustLevel:i,gitScope:s,gitSignUser:g,gitSignCommit:u,gitSignTag:a,gitSignPush:c,verbose:!0});G=P.digest,y=P.name,v=P.email}const N=await fe(tt)(gt,{env:{...w.env,GIT_AUTHOR_NAME:y,GIT_AUTHOR_EMAIL:v,GIT_COMMITTER_NAME:y,GIT_COMMITTER_EMAIL:v,GITHUB_TOKEN:p}});N!==!1?console.log("release:",N.nextRelease.version):console.warn("failed to release!"),await Zt(G)};de().then(t=>{console.log("hasil:",t)}).catch(t=>{throw t instanceof Error?t:new Error("Unknown error")});
