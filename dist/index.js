#!/usr/bin/env node
"use strict";var w=require("node:process"),E=require("execa"),ee=require("semantic-release"),y=require("node:fs"),v=require("node:path"),L=require("node:os"),K=require("nanoid"),te=require("openpgp"),re=require("addressparser"),G=require("@actions/core");const ne="/github/workspace",M=e=>typeof e=="object"&&e!==null&&!Array.isArray(e)&&"__esModule"in e&&e.__esModule===!0&&"default"in e?e.default:e,R=e=>`\x1B[${e}m`,ie=R(32),se=R(33),oe=R(90),U=(e,t,r="\x1B[39m")=>e.split(`
`).map(n=>(n=t+n,n=n.endsWith("\r")?n.slice(0,-1)+r+"\r":n+r,n)).join(`
`),H=e=>{console.log(U(e,se))},O=e=>{console.log(U(e,ie))},A=e=>{console.log(U(e,oe))},i=e=>{console.log(e)},x=async(e=[])=>await E.execa("git",e),$=async(e,t=!1)=>{const r=["config","--get"];t&&r.push("--global"),r.push(e);const{stdout:n}=await x(r);return n==="true"?!0:n==="false"?!1:n},I=async(e,t,r=!1)=>{const n=["config"];r&&n.push("--global"),n.push(e,t),await x(n)},ae="gpg-agent.conf",W=".gnupg",ce={WIN32:"win32"},ge=`default-cache-ttl 21600
max-cache-ttl 31536000
allow-preset-passphrase
`,k=async e=>{const{stdout:t}=await E.execa("gpg-connect-agent",[e,"/bye"]);return t},ue=async(e,t)=>{const r=v.join(e,ae);y.writeFileSync(r,t),await k("RELOADAGENT")},m=async(e=[],t={})=>await E.execa("gpg",e,t),le=async e=>{const t=["--batch","--yes",e],r=n=>[...t.slice(0,2),n,...t.slice(-1)];await m(r("--delete-secret-keys")),await m(r("--delete-keys"))},pe=async(e=[])=>await E.execa("gpgconf",e),N={cwd:w.cwd(),verbose:!1},F=e=>{Object.keys(e).forEach(t=>{N[t]=e[t]})},j=()=>{const e=w.cwd(),t=N.cwd;e!==t&&(i("---------------- Restore working directory -----------------------"),w.chdir(t),i(`Restore working directory to ${t}.`))},b=(e,t=!1)=>e.split(/\n\r|\r\n|\r|\n/).map(r=>t?r.trim():r),fe=e=>{if(e!==void 0){if(typeof e!="string"||e==="")throw new Error("Invalid fingerprint value",{cause:e});return e}},Ge=(e="local")=>{if(typeof e!="string"||!["global","local"].includes(e))throw new Error("Invalid gitScope value",{cause:e});return e},de=(e=!1)=>{if(typeof e!="boolean")throw new Error("Invalid gitSignCommit value",{cause:e});return e},we=(e=!1)=>{if(typeof e!="boolean"&&(typeof e!="string"||e!=="if-asked"))throw new Error("Invalid gitSignPush value",{cause:e});return e},ye=(e=!1)=>{if(typeof e!="boolean")throw new Error("Invalid gitSignTag value",{cause:e});return e},me=(e=!0)=>{if(typeof e!="boolean")throw new Error("Invalid gitSignUser value",{cause:e});return e},$e=e=>{if(e!==void 0){if(typeof e!="string"||e==="")throw new Error("Invalid passphrase value",{cause:e});return e}},Ie=e=>{if(e===void 0)return;const t=Number(e);if(Number.isNaN(t)||t<1||t>5)throw new Error("Invalid trustLevel value",{cause:e});return e},Se=(e=!1)=>{if(typeof e!="boolean")throw new Error("Invalid verbose value",{cause:e});return e},he=e=>{try{return y.statSync(e).isDirectory()}catch{return!1}},Ee=(e=".")=>{if(typeof e!="string"||e==="")throw new Error("Invalid workdir value",{cause:e});if(!he(e))throw new Error(`workdir ${e} is doesn't exist`,{cause:e});return e},ve=e=>{if(typeof e!="object"||e===null||Array.isArray(e))throw new Error("Invalid options value",{cause:e});const t=Ee(e.workdir),r=$e(e.passphrase),n=fe(e.fingerprint),s=Ie(e.trustLevel),o=Ge(e.gitScope),c=me(e.gitSignUser),l=de(e.gitSignCommit),a=ye(e.gitSignTag),g=we(e.gitSignPush),f=Se(e.verbose);return F({...N,verbose:f}),i("---------------- importGPG's options to use ---------------------"),i(`workdir         : ${t}`),i(`passphrase      : ${r}`),i(`fingerprint     : ${n}`),i(`trustLevel      : ${s}`),i(`gitScope        : ${o}`),i(`gitSignUser     : ${c}`),i(`gitSignCommit   : ${l}`),i(`gitSignTag      : ${a}`),i(`gitSignPush     : ${g}`),i(`verbose         : ${f}`),{workdir:t,passphrase:r,fingerprint:n,trustLevel:s,gitScope:o,gitSignUser:c,gitSignCommit:l,gitSignTag:a,gitSignPush:g,verbose:f}},Te=(e,t)=>e.slice(t.length+1).replace("%3a",":").trim(),D=async()=>{const e=["--list-dirs"],{stdout:t}=await pe(e),r=b(t,!0),n={libdir:"",libexecdir:"",datadir:"",homedir:""};return r.forEach(s=>{Object.keys(n).forEach(o=>{const c=o;s.startsWith(`${c}:`)&&(n[c]=Te(s,c))})}),Object.keys(n).forEach(s=>{const o=n[s];if(typeof o!="string"||o==="")throw new Error(`Invalid GPG ${s}`,{cause:o})}),n},Pe=async()=>{const{GNUPGHOME:e,HOME:t,USERPROFILE:r}=w.env;if(typeof e=="string"&&e!=="")return e;if(typeof t=="string"&&t!=="")return v.join(t,W);if(typeof r=="string"&&r!==""&&L.platform()===ce.WIN32)return v.join(r,W);const{homedir:n}=await D();return n},_e=async()=>{const e=await Pe();if(e.length===0)throw new Error("Unable to determine GnuPG home directory",{cause:e});return y.existsSync(e)||y.mkdirSync(e,{recursive:!0}),e},ke=(e,t)=>{let r="",n=!1;const s=b(e,!0);for(const o of s){if(o.startsWith("fpr:")&&o.includes(`:${t}:`)){n=!0;continue}if(o.startsWith("grp:")&&n){r=o.replace(/(grp|:)/g,"").trim();break}}return r},Ne=async e=>{const t=["--batch","--with-colons","--with-keygrip","--list-secret-keys",e],{stdout:r}=await m(t);return ke(r,e)},be=async e=>{const t=["--batch","--with-colons","--with-keygrip","--list-secret-keys",e],{stdout:r}=await m(t),n=b(r,!0),s=[];return n.forEach(o=>{o.startsWith("grp")&&s.push(o.replace(/(grp|:)/g,"").trim())}),s},C=(e,t)=>e.slice(t.length+1).trim(),Re=async()=>{const e=["--version"],{stdout:t}=await m(e),r=b(t,!0),n={gnupg:"",libgcrypt:""};return r.forEach(s=>{s.startsWith("gpg (GnuPG) ")?n.gnupg=C(s,"gpg (GnuPG)"):s.startsWith("gpg (GnuPG/MacGPG2) ")?n.gnupg=C(s,"gpg (GnuPG/MacGPG2)"):s.startsWith("libgcrypt ")&&(n.libgcrypt=C(s,"libgcrypt"))}),Object.keys(n).forEach(s=>{const o=n[s];if(typeof o!="string"||o==="")throw new Error(`Invalid GPG ${s}`,{cause:o})}),n},Ue=e=>e.trimStart().startsWith("---"),q=e=>Ue(e)?e:Buffer.from(e,"base64").toString(),Oe=async e=>{const t=q(e),r=await te.readKey({armoredKey:t}),{user:n}=await r.getPrimaryUser(),s=r.getFingerprint().toUpperCase(),o=r.getKeyID().toHex().toUpperCase(),c=M(re),{name:l,address:a}=c(n.userID?.userID??"")[0],g=r.getCreationTime();return{digest:s,id:o,name:l,email:a,creationTime:g}},Ae=async e=>{const t=v.join(L.tmpdir(),`mnrendra-import-gpg-${K.nanoid()}`),r=y.mkdtempSync(t),n=`${r}/${K.nanoid()}.pgp`,s=q(e);y.writeFileSync(n,s,{mode:384});const o=["--import","--batch","--yes",n],{stdout:c,stderr:l}=await m(o);return l!==""?l:(y.unlinkSync(n),y.rmSync(r),c)},Ce=async()=>{await k("KILLAGENT")},V=async(e,t)=>{const r=Buffer.from(t,"utf8").toString("hex").toUpperCase();return await k(`PRESET_PASSPHRASE ${e} -1 ${r}`),await k(`KEYINFO ${e}`)},Le=async(e,t)=>{const r=["--batch","--no-tty","--command-fd","0","--edit-key",e],n=Buffer.from(`trust
${t}
y
quit
`);await m(r,{input:n})},B="user.signingkey",Y="user.name",z="user.email",X="commit.gpgsign",J="tag.gpgsign",Q="push.gpgsign",Ke=async(e,t,r,{scope:n,signUser:s,signCommit:o,signTag:c,signPush:l})=>{i("---------------- Configuring Git ---------------------------------");const a={scope:"local",userSigningkey:"",commitGpgsign:!1,tagGpgsign:!1,pushGpgsign:!1,userName:"",userEmail:""},g=n==="global";return a.scope=n,i(`scope           : ${a.scope}`),s&&(await I(B,e,g),a.userSigningkey=await $(B,g),i(`user.signingkey : ${a.userSigningkey}`),await I(Y,t,g),a.userName=await $(Y,g),i(`user.name       : ${a.userName}`),await I(z,r,g),a.userEmail=await $(z,g),i(`user.email      : ${a.userEmail}`)),o&&(await I(X,`${o}`,g),a.commitGpgsign=await $(X,g),i(`commit.gpgsign  : ${a.commitGpgsign}`)),c&&(await I(J,`${c}`,g),a.tagGpgsign=await $(J,g),i(`tag.gpgsign     : ${a.tagGpgsign}`)),l!==!1&&(await I(Q,`${l}`,g),a.pushGpgsign=await $(Q,g),i(`push.gpgsign    : ${a.pushGpgsign}`)),a},Me=async(e,t,r)=>{const n={gpgHome:"",keygrips:[]};if(r===void 0)return n;const s=await _e();if(await ue(s,ge),n.gpgHome=s,i("---------------- Configuring GnuPG agent -------------------------"),i(`GnuPG home      : ${s}`),t!==void 0){i("---------------- Getting keygrip for fingerprint -----------------");const o=await Ne(t);i(`Presetting passphrase for key ${t} with keygrip ${o}`);const c=await V(o,r);A(c),n.keygrips=[o]}else{i("---------------- Getting keygrips --------------------------------");const o=await be(e);for(const c of o){i(`Presetting passphrase for ${c}`);const l=await V(c,r);A(l)}n.keygrips=o}return n},He=async()=>{const e=await Re(),t=await D(),r={...e,...t};Object.keys(r).forEach(s=>{const o=r[s];if(typeof o!="string"&&o==="")throw new Error(`Invalid GPG ${s} value`,{cause:o})});const n=`${r.gnupg} (libgcrypt ${r.libgcrypt})`;return i("---------------- GnuPG info --------------------------------------"),i(`Version         : ${n}`),i(`Libdir          : ${r.libdir}`),i(`Libexecdir      : ${r.libexecdir}`),i(`Datadir         : ${r.datadir}`),i(`Homedir         : ${r.homedir}`),{...r,version:n}},xe=async e=>{const{digest:t,id:r,name:n,email:s,creationTime:o}=await Oe(e);return i("---------------- GPG private key info ----------------------------"),i(`Fingerprint     : ${t}`),i(`KeyID           : ${r}`),i(`Name            : ${n}`),i(`Email           : ${s}`),i(`CreationTime    : ${o.toUTCString()}`),{digest:t,id:r,name:n,email:s,creationTime:o}},We=async(e,t)=>{i("---------------- Importing GPG private key -----------------------");const r=await Ae(e);return i(r),r},Fe=(e,t)=>{i("---------------- Fingerprint to use ------------------------------"),i(t??e)},je=async(e,t)=>{if(t===void 0)return"";const r=Number(t);if(Number.isNaN(r)||r<1||r>5)throw new Error("Invalid GPG Trust Level value",{cause:t});return i("---------------- Setting key's trust level ----------------------"),await Le(e,t),i(`Trust level set to ${t} for ${e}`),`Trust level set to ${t} for ${e}`},De=async e=>{const t=w.cwd();F({...N,cwd:t});const r=v.resolve(e);t!==r&&(i("---------------- Change working directory ------------------------"),w.chdir(r),i(`Using ${r} as working directory...`))},qe=async(e,t={})=>{try{if(typeof e!="string"||e==="")throw new Error("Invalid GnuPG private key",{cause:e});const r=ve(t),{workdir:n,fingerprint:s,passphrase:o,trustLevel:c}=r;await De(n);const l=await He(),a=await xe(e),{digest:g,id:f,name:T,email:S}=a;Fe(g,s);const h=await We(e),P=await Me(g,s,o);await je(f,c),O("---------------- Successfully set up GPG key ---------------------");const _={scope:r.gitScope,signUser:r.gitSignUser,signCommit:r.gitSignCommit,signTag:r.gitSignTag,signPush:r.gitSignPush},p=await Ke(f,T,S,_);O("---------------- Successfully configured Git ---------------------");const Z={...l,...a,...P,...p,keyid:f,fingerprint:s??g,log:h,trustLevel:c,gitConfigScope:p.scope,gitUserSigningkey:p.userSigningkey,gitUserName:p.userName,gitUserEmail:p.userEmail,gitCommitGpgsign:p.commitGpgsign,gitTagGpgsign:p.tagGpgsign,gitPushGpgsign:p.pushGpgsign,workdir:w.cwd()};return j(),Z}catch(r){throw j(),r instanceof Error?r:new Error("Unknown error",{cause:r})}},Ve=async(e="")=>{if(e.length<=0){A("Primary key fingerprint is not defined. Skipping cleanup.");return}try{i("---------------- Cleaning up GPG key -----------------------------"),i(`Removing key ${e}`),await le(e),i("Killing GnuPG agent"),await Ce(),O("---------------- Successfully cleaned up GPG key -----------------")}catch(t){const r=t instanceof Error?t.message:"Unknown error";H(r),H(`${t}`)}},Be=["alpha","beta","rc"],Ye=["docs","style","refactor","perf","test","build","ci","chore","revert"],ze=Be.map(e=>({name:e,prerelease:!0})),Xe=["+([0-9])?(.{+([0-9]),x}).x","main","next",...ze],Je=Ye.map(e=>({type:e,release:"patch"})),Qe="/action",Ze=[["@semantic-release/commit-analyzer",{releaseRules:Je}],"@semantic-release/release-notes-generator",["@semantic-release/npm",{npmPublish:!1}],`${Qe}/@mnrendra/semantic-release-plugin-github-action`,"@semantic-release/github"],et={branches:Xe,plugins:Ze,dryRun:!1,ci:!0},d=Object.freeze({WORKDIR:".",GPG_PRIVATE_KEY:void 0,GPG_PASSPHRASE:void 0,GPG_FINGERPRINT:void 0,GPG_TRUST_LEVEL:void 0,GIT_SCOPE:"local",GIT_SIGN_USER:!0,GIT_SIGN_COMMIT:!1,GIT_SIGN_TAG:!1,GIT_SIGN_PUSH:!1,TOKEN:w.env.GITHUB_TOKEN}),u=Object.freeze({WORKDIR:"workdir",GPG_PRIVATE_KEY:"gpg-private-key",GPG_PASSPHRASE:"gpg-passphrase",GPG_FINGERPRINT:"gpg-fingerprint",GPG_TRUST_LEVEL:"gpg-trust-level",GIT_SCOPE:"git-scope",GIT_SIGN_USER:"git-sign-user",GIT_SIGN_COMMIT:"git-sign-commit",GIT_SIGN_TAG:"git-sign-tag",GIT_SIGN_PUSH:"git-sign-push",TOKEN:"token"}),tt=()=>{const e=G.getInput(u.GPG_FINGERPRINT);if(e===void 0||e==="")return d.GPG_FINGERPRINT;if(typeof e!="string")throw new Error(`Invalid ${u.GPG_FINGERPRINT} input`,{cause:e});return e},rt=()=>{const e=G.getInput(u.GIT_SCOPE);if(e===void 0||e==="")return d.GIT_SCOPE;if(typeof e!="string"||!["global","local"].includes(e))throw new Error(`Invalid ${u.GIT_SCOPE} input`,{cause:e});return e},nt=()=>{const e=G.getInput(u.GIT_SIGN_COMMIT);if(e===void 0||e==="")return d.GIT_SIGN_COMMIT;if(typeof e=="boolean")return e;switch(e){case"false":return!1;case"true":return!0;default:throw new Error(`Invalid ${u.GIT_SIGN_COMMIT} input`,{cause:e})}},it=()=>{const e=G.getInput(u.GIT_SIGN_PUSH);if(e===void 0||e==="")return d.GIT_SIGN_PUSH;if(typeof e=="boolean")return e;switch(e){case"false":return!1;case"true":return!0;case"if-asked":return"if-asked";default:throw new Error(`Invalid ${u.GIT_SIGN_PUSH} input`,{cause:e})}},st=()=>{const e=G.getInput(u.GIT_SIGN_TAG);if(e===void 0||e==="")return d.GIT_SIGN_TAG;if(typeof e=="boolean")return e;switch(e){case"false":return!1;case"true":return!0;default:throw new Error(`Invalid ${u.GIT_SIGN_TAG} input`,{cause:e})}},ot=()=>{const e=G.getInput(u.GIT_SIGN_USER);if(e===void 0||e==="")return d.GIT_SIGN_USER;if(typeof e=="boolean")return e;switch(e){case"false":return!1;case"true":return!0;default:throw new Error(`Invalid ${u.GIT_SIGN_USER} input`,{cause:e})}},at=()=>{const e=G.getInput(u.GPG_PASSPHRASE);if(e===void 0||e==="")return d.GPG_PASSPHRASE;if(typeof e!="string")throw new Error(`Invalid ${u.GPG_PASSPHRASE} input`,{cause:e});return e},ct=()=>{const e=G.getInput(u.GPG_PRIVATE_KEY);if(e===void 0||e==="")return d.GPG_PRIVATE_KEY;if(typeof e!="string")throw new Error(`Invalid ${u.GPG_PRIVATE_KEY} input`,{cause:e});return e},gt=()=>{const e=G.getInput(u.TOKEN);if(e===void 0||e==="")return d.TOKEN;if(typeof e!="string")throw new Error(`Invalid ${u.TOKEN} input`,{cause:e});return e},ut=()=>{const e=G.getInput(u.GPG_TRUST_LEVEL);if(e===void 0||e==="")return d.GPG_TRUST_LEVEL;const t=Number(e);if(Number.isNaN(t)||t<1||t>5)throw new Error(`Invalid ${u.GPG_TRUST_LEVEL} input`,{cause:e});return t},lt=()=>{const e=G.getInput(u.WORKDIR);if(e===void 0||e==="")return d.WORKDIR;if(typeof e!="string")throw new Error(`Invalid ${u.WORKDIR} input`,{cause:e});return e},pt=()=>{const e=tt(),t=rt(),r=nt(),n=it(),s=st(),o=ot(),c=at(),l=ct(),a=gt(),g=ut(),f=lt();return{fingerprint:e,gitScope:t,gitSignCommit:r,gitSignPush:n,gitSignTag:s,gitSignUser:o,passphrase:c,privateKey:l,token:a,trustLevel:g,workdir:f}},ft=async()=>{await E.execa("git",["config","--global","--add","safe.directory",ne]);const{workdir:e,privateKey:t,passphrase:r,fingerprint:n,trustLevel:s,gitScope:o,gitSignUser:c,gitSignCommit:l,gitSignTag:a,gitSignPush:g,token:f}=pt();let T="",S="GitOps Release",h="gitops-release@users.noreply.github.com",P=w.cwd();if(t!==void 0){const p=await qe(t,{workdir:e,passphrase:r,fingerprint:n,trustLevel:s,gitScope:o,gitSignUser:c,gitSignCommit:l,gitSignTag:a,gitSignPush:g,verbose:!0});T=p.digest,S=p.name,h=p.email,P=p.workdir}const _=await M(ee)(et,{env:{...w.env,GIT_AUTHOR_NAME:S,GIT_AUTHOR_EMAIL:h,GIT_COMMITTER_NAME:S,GIT_COMMITTER_EMAIL:h,GITHUB_TOKEN:f}});return _!==!1?console.log("release:",_.nextRelease.version):console.warn("failed to release!"),await Ve(T),P};ft().then(e=>{console.log("hasil:",e)}).catch(e=>{throw e instanceof Error?e:new Error("Unknown error")});
