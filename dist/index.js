#!/usr/bin/env node
"use strict";var G=require("node:process"),pe=require("semantic-release"),U=require("execa"),y=require("node:fs"),E=require("node:path"),A=require("node:os"),L=require("nanoid"),fe=require("openpgp"),Ge=require("addressparser"),l=require("@actions/core");const de="/github/workspace",K=e=>typeof e=="object"&&e!==null&&!Array.isArray(e)&&"__esModule"in e&&e.__esModule===!0&&"default"in e?e.default:e,I=async(e,r=[])=>await U.execa("git",[e,...r]),we=(e,{allowEmpty:r=!1,keyid:t,sign:n=!1}={})=>{const s=[];if(n){const o="-S",c=typeof t=="string"&&t!==""?`${o}${t}`:o;s.push(c)}return r&&s.push("--allow-empty"),[...s,"-m",`${e}`]},ye=async(e,r={})=>{const t=we(e,r);return await I("commit",t)},me=(e,{get:r=!1,list:t=!1,unset:n=!1,scope:s="local",value:o}={})=>{const c=[`--${s}`];return o!=null?c.push(`${e}`,`${o.toString()}`):r?c.push("--get",`${e}`):n?c.push("--unset",`${e}`):t&&c.push("--list"),c},T=async(e,r)=>{const t=me(e,r);return await I("config",t)},m=async(e,r="local")=>{const{stdout:t}=await T(e,{get:!0,scope:r});if(t==="false")return!1;if(t==="true")return!0;const n=Number(t);return Number.isNaN(n)?t:n},$=async(e,r,t="local")=>await T(e,{scope:t,value:r}),$e=(e,{delete:r=!1,remote:t="origin",signed:n=!1}={})=>{const s=[t,e];return r?[t,"-d",e]:(n!==!1&&s.push(`--signed=${n}`),s)},he=async(e,r={})=>{const t=$e(e,r);return await I("push",t)},Ie=(e,{commit:r,delete:t=!1,message:n="",sign:s=!1}={})=>{if(t)return["-d",e];const o=[];return s&&o.push("-s"),o.push(e),r!==void 0&&o.push(r),[...o,"-m",`${n}`]},Ee=async(e,r={})=>{const t=Ie(e,r);return await I("tag",t)},Se=e=>({value:e,enumerable:!0,configurable:!1,writable:!1}),ve=(e,r)=>{Object.keys(r).forEach(t=>{const n=Se(r[t]);Object.defineProperty(e,t,n)})};ve(I,{commit:ye,config:T,getConfig:m,setConfig:$,push:he,tag:Ee});const P=e=>`\x1B[${e}m`,Te=P(32),Pe=P(33),_e=P(90),_=(e,r,t="\x1B[39m")=>e.split(`
`).map(n=>(n=r+n,n=n.endsWith("\r")?n.slice(0,-1)+t+"\r":n+t,n)).join(`
`),M=e=>{console.log(_(e,Pe))},N=e=>{console.log(_(e,Te))},b=e=>{console.log(_(e,_e))},i=e=>{console.log(e)},Ne="gpg-agent.conf",H=".gnupg",be={WIN32:"win32"},F=`default-cache-ttl 21600
max-cache-ttl 31536000
allow-preset-passphrase
`,x=(e,r=!1)=>e.split(/\n\r|\r\n|\r|\n/).map(t=>r?t.trim():t),k=async(e,r=[],t={})=>{const n=await U.execa(e,r,t),s=x(n.stderr,!0),o=x(n.stdout,!0);return{...n,stderrLines:s,stdoutLines:o}},ke=e=>{try{return y.statSync(e).isDirectory()}catch{return!1}},S=async e=>{const{stdout:r}=await k("gpg-connect-agent",[e,"/bye"]);return r},W=async(e,r)=>{const t=E.join(e,Ne);y.writeFileSync(t,r),await S("RELOADAGENT")},h=async(e=[],r={})=>await k("gpg",e,r),Re=async e=>{const r=["--batch","--yes",e],t=n=>[...r.slice(0,2),n,...r.slice(-1)];await h(t("--delete-secret-keys")),await h(t("--delete-keys"))},Oe=async(e=[])=>await k("gpgconf",e),Ce=(e,r)=>e.slice(r.length+1).replace("%3a",":").trim(),R=async()=>{const e=["--list-dirs"],{stdoutLines:r}=await Oe(e),t={libdir:"",libexecdir:"",datadir:"",homedir:""};return r.forEach(n=>{Object.keys(t).forEach(s=>{const o=s;n.startsWith(`${o}:`)&&(t[o]=Ce(n,o))})}),Object.keys(t).forEach(n=>{const s=t[n];if(typeof s!="string"||s==="")throw new Error(`Invalid GPG ${n}`,{cause:s})}),t},Ue=async()=>{const{GNUPGHOME:e,HOME:r,USERPROFILE:t}=G.env;if(typeof e=="string"&&e!=="")return e;if(typeof r=="string"&&r!=="")return E.join(r,H);if(typeof t=="string"&&t!==""&&A.platform()===be.WIN32)return E.join(t,H);const{homedir:n}=await R();return n},j=async()=>{const e=await Ue();if(e.length===0)throw new Error("Unable to determine GnuPG home directory",{cause:e});return y.existsSync(e)||y.mkdirSync(e,{recursive:!0}),e},D=(e,r)=>{let t="",n=!1;for(const s of e){if(s.startsWith("fpr:")&&s.includes(`:${r}:`)){n=!0;continue}if(s.startsWith("grp:")&&n){t=s.replace(/(grp|:)/g,"").trim();break}}return t},V=async e=>{const r=["--batch","--with-colons","--with-keygrip","--list-secret-keys",e],{stdoutLines:t}=await h(r);return D(t,e)},q=async e=>{const r=["--batch","--with-colons","--with-keygrip","--list-secret-keys",e],{stdoutLines:t}=await h(r),n=[];return t.forEach(s=>{s.startsWith("grp")&&n.push(s.replace(/(grp|:)/g,"").trim())}),n},O=(e,r)=>e.slice(r.length+1).trim(),B=async()=>{const e=["--version"],{stdoutLines:r}=await h(e),t={gnupg:"",libgcrypt:""};return r.forEach(n=>{n.startsWith("gpg (GnuPG) ")?t.gnupg=O(n,"gpg (GnuPG)"):n.startsWith("gpg (GnuPG/MacGPG2) ")?t.gnupg=O(n,"gpg (GnuPG/MacGPG2)"):n.startsWith("libgcrypt ")&&(t.libgcrypt=O(n,"libgcrypt"))}),Object.keys(t).forEach(n=>{const s=t[n];if(typeof s!="string"||s==="")throw new Error(`Invalid GPG ${n}`,{cause:s})}),t},Ae=e=>e.trimStart().startsWith("---"),Y=e=>Ae(e)?e:Buffer.from(e,"base64").toString(),Le=async e=>{const r=Y(e),t=await fe.readKey({armoredKey:r}),{user:n}=await t.getPrimaryUser(),s=t.getFingerprint().toUpperCase(),o=t.getKeyID().toHex().toUpperCase(),c=K(Ge),{name:u,address:a}=c(n.userID?.userID??"")[0],f=t.getCreationTime();return{digest:s,id:o,name:u,email:a,creationTime:f}},z=async e=>{const r=E.join(A.tmpdir(),`mnrendra-import-gpg-${L.nanoid()}`),t=y.mkdtempSync(r),n=`${t}/${L.nanoid()}.pgp`,s=Y(e);y.writeFileSync(n,s,{mode:384});const o=["--import","--batch","--yes",n],{stdout:c,stderr:u}=await h(o);return u!==""?u:(y.unlinkSync(n),y.rmSync(t),c)},Ke=async()=>{await S("KILLAGENT")},C=async(e,r)=>{const t=Buffer.from(r,"utf8").toString("hex").toUpperCase();return await S(`PRESET_PASSPHRASE ${e} -1 ${t}`),await S(`KEYINFO ${e}`)},X=async(e,r)=>{const t=["--batch","--no-tty","--command-fd","0","--edit-key",e],n=Buffer.from(`trust
${r}
y
quit
`);await h(t,{input:n})};var J={GPG_AGENT_CONF:F,configureAgent:W,deleteKey:Re,getDirs:R,getHome:j,getKeygrip:V,getKeygrips:q,getVersion:B,importKey:z,killAgent:Ke,parseKeygripFromGpgColonsOutput:D,presetPassphrase:C,setTrust:X};const Q="user.signingkey",Z="user.name",ee="user.email",te="commit.gpgsign",re="tag.gpgsign",ne="push.gpgsign",Me=async(e,r,t,{scope:n,signUser:s,signCommit:o,signTag:c,signPush:u})=>{i("---------------- Configuring Git ---------------------------------");const a={scope:"local",userSigningkey:"",commitGpgsign:!1,tagGpgsign:!1,pushGpgsign:!1,userName:"",userEmail:""};return a.scope=n,i(`scope           : ${a.scope}`),s&&(await $(Q,e,n),a.userSigningkey=await m(Q,n),i(`user.signingkey : ${a.userSigningkey}`),await $(Z,r,n),a.userName=await m(Z,n),i(`user.name       : ${a.userName}`),await $(ee,t,n),a.userEmail=await m(ee,n),i(`user.email      : ${a.userEmail}`)),o&&(await $(te,o,n),a.commitGpgsign=await m(te,n),i(`commit.gpgsign  : ${a.commitGpgsign}`)),c&&(await $(re,c,n),a.tagGpgsign=await m(re,n),i(`tag.gpgsign     : ${a.tagGpgsign}`)),u!==!1&&(await $(ne,u,n),a.pushGpgsign=await m(ne,n),i(`push.gpgsign    : ${a.pushGpgsign}`)),a},He=async(e,r,t)=>{const n={gpgHome:"",keygrips:[]};if(t===void 0)return n;const s=await j();if(await W(s,F),n.gpgHome=s,i("---------------- Configuring GnuPG agent -------------------------"),i(`GnuPG home      : ${s}`),r!==void 0){i("---------------- Getting keygrip for fingerprint -----------------");const o=await V(r);i(`Presetting passphrase for key ${r} with keygrip ${o}`);const c=await C(o,t);b(c),n.keygrips=[o]}else{i("---------------- Getting keygrips --------------------------------");const o=await q(e);for(const c of o){i(`Presetting passphrase for ${c}`);const u=await C(c,t);b(u)}n.keygrips=o}return n},Fe=async()=>{const e=await B(),r=await R(),t={...e,...r};Object.keys(t).forEach(s=>{const o=t[s];if(typeof o!="string"&&o==="")throw new Error(`Invalid GPG ${s} value`,{cause:o})});const n=`${t.gnupg} (libgcrypt ${t.libgcrypt})`;return i("---------------- GnuPG info --------------------------------------"),i(`Version         : ${n}`),i(`Libdir          : ${t.libdir}`),i(`Libexecdir      : ${t.libexecdir}`),i(`Datadir         : ${t.datadir}`),i(`Homedir         : ${t.homedir}`),{...t,version:n}},xe=async e=>{const{digest:r,id:t,name:n,email:s,creationTime:o}=await Le(e);return i("---------------- GPG private key info ----------------------------"),i(`Fingerprint     : ${r}`),i(`KeyID           : ${t}`),i(`Name            : ${n}`),i(`Email           : ${s}`),i(`CreationTime    : ${o.toUTCString()}`),{digest:r,id:t,name:n,email:s,creationTime:o}},We=async(e,r)=>{i("---------------- Importing GPG private key -----------------------");const t=await z(e);return i(t),t},je=(e,r)=>{i("---------------- Fingerprint to use ------------------------------"),i(r??e)},v={cwd:G.cwd(),verbose:!1},se=e=>{Object.keys(e).forEach(r=>{v[r]=e[r]})},ie=()=>{const e=G.cwd(),r=v.cwd;e!==r&&(i("---------------- Restore working directory -----------------------"),G.chdir(r),i(`Restore working directory to ${r}.`))},De=async(e,r)=>{if(r===void 0)return"";const t=Number(r);if(Number.isNaN(t)||t<1||t>5)throw new Error("Invalid GPG Trust Level value",{cause:r});return i("---------------- Setting key's trust level ----------------------"),await X(e,r),i(`Trust level set to ${r} for ${e}`),`Trust level set to ${r} for ${e}`},Ve=async e=>{const r=G.cwd();se({...v,cwd:r});const t=E.resolve(e);r!==t&&(i("---------------- Change working directory ------------------------"),G.chdir(t),i(`Using ${t} as working directory...`))},qe=(e=".")=>{if(typeof e!="string"||e==="")throw new Error("Invalid workdir value",{cause:e});if(!ke(e))throw new Error(`workdir ${e} is doesn't exist`,{cause:e});return e},Be=e=>{if(e!==void 0){if(typeof e!="string"||e==="")throw new Error("Invalid passphrase value",{cause:e});return e}},Ye=e=>{if(e!==void 0){if(typeof e!="string"||e==="")throw new Error("Invalid fingerprint value",{cause:e});return e}},ze=e=>{if(e===void 0)return;const r=Number(e);if(Number.isNaN(r)||r<1||r>5)throw new Error("Invalid trustLevel value",{cause:e});return e},Xe=(e="local")=>{if(typeof e!="string"||!["global","local"].includes(e))throw new Error("Invalid gitScope value",{cause:e});return e},Je=(e=!0)=>{if(typeof e!="boolean")throw new Error("Invalid gitSignUser value",{cause:e});return e},Qe=(e=!1)=>{if(typeof e!="boolean")throw new Error("Invalid gitSignCommit value",{cause:e});return e},Ze=(e=!1)=>{if(typeof e!="boolean")throw new Error("Invalid gitSignTag value",{cause:e});return e},et=(e=!1)=>{if(typeof e!="boolean"&&(typeof e!="string"||e!=="if-asked"))throw new Error("Invalid gitSignPush value",{cause:e});return e},tt=(e=!1)=>{if(typeof e!="boolean")throw new Error("Invalid verbose value",{cause:e});return e},rt=e=>{if(typeof e!="object"||e===null||Array.isArray(e))throw new Error("Invalid options value",{cause:e});const r=qe(e.workdir),t=Be(e.passphrase),n=Ye(e.fingerprint),s=ze(e.trustLevel),o=Xe(e.gitScope),c=Je(e.gitSignUser),u=Qe(e.gitSignCommit),a=Ze(e.gitSignTag),f=et(e.gitSignPush),d=tt(e.verbose);return se({...v,verbose:d}),i("---------------- importGPG's options to use ---------------------"),i(`workdir         : ${r}`),i(`passphrase      : ${t}`),i(`fingerprint     : ${n}`),i(`trustLevel      : ${s}`),i(`gitScope        : ${o}`),i(`gitSignUser     : ${c}`),i(`gitSignCommit   : ${u}`),i(`gitSignTag      : ${a}`),i(`gitSignPush     : ${f}`),i(`verbose         : ${d}`),{workdir:r,passphrase:t,fingerprint:n,trustLevel:s,gitScope:o,gitSignUser:c,gitSignCommit:u,gitSignTag:a,gitSignPush:f,verbose:d}},nt=async(e,r={})=>{try{if(typeof e!="string"||e==="")throw new Error("Invalid GnuPG private key",{cause:e});const t=rt(r),{workdir:n,fingerprint:s,passphrase:o,trustLevel:c}=t;await Ve(n);const u=await Fe(),a=await xe(e),{digest:f,id:d,name:oe,email:ae}=a;je(f,s);const ce=await We(e),ge=await He(f,s,o);await De(d,c),N("---------------- Successfully set up GPG key ---------------------");const ue={scope:t.gitScope,signUser:t.gitSignUser,signCommit:t.gitSignCommit,signTag:t.gitSignTag,signPush:t.gitSignPush},w=await Me(d,oe,ae,ue);N("---------------- Successfully configured Git ---------------------");const le={...u,...a,...ge,...w,keyid:d,fingerprint:s??f,log:ce,trustLevel:c,gitConfigScope:w.scope,gitUserSigningkey:w.userSigningkey,gitUserName:w.userName,gitUserEmail:w.userEmail,gitCommitGpgsign:w.commitGpgsign,gitTagGpgsign:w.tagGpgsign,gitPushGpgsign:w.pushGpgsign,workdir:G.cwd()};return ie(),le}catch(t){throw ie(),t instanceof Error?t:new Error("Unknown error",{cause:t})}},st=async(e="")=>{if(e.length<=0){b("Primary key fingerprint is not defined. Skipping cleanup.");return}try{i("---------------- Cleaning up GPG key -----------------------------"),i(`Removing key ${e}`),await J.deleteKey(e),i("Killing GnuPG agent"),await J.killAgent(),N("---------------- Successfully cleaned up GPG key -----------------")}catch(r){const t=r instanceof Error?r.message:"Unknown error";M(t),M(`${r}`)}},it=["alpha","beta","rc"],ot=it.map(e=>({name:e,prerelease:!0})),at=["+([0-9])?(.{+([0-9]),x}).x","main","next",...ot],ct="/action",gt=["docs","style","refactor","perf","test","build","ci","chore","revert"],ut=gt.map(e=>({type:e,release:"patch"})),lt=[["@semantic-release/commit-analyzer",{releaseRules:ut}],"@semantic-release/release-notes-generator",["@semantic-release/npm",{npmPublish:!1}],[`${ct}/@mnrendra/semantic-release-plugin-github-action`,{signCommit:!0,signTag:!0}],"@semantic-release/github"],pt={branches:at,plugins:lt,dryRun:!1,ci:!0},p=Object.freeze({WORKDIR:".",GPG_PRIVATE_KEY:void 0,GPG_PASSPHRASE:void 0,GPG_FINGERPRINT:void 0,GPG_TRUST_LEVEL:void 0,GIT_SCOPE:"local",GIT_SIGN_USER:!0,GIT_SIGN_COMMIT:!1,GIT_SIGN_TAG:!1,GIT_SIGN_PUSH:!1,TOKEN:G.env.GITHUB_TOKEN}),g=Object.freeze({WORKDIR:"workdir",GPG_PRIVATE_KEY:"gpg-private-key",GPG_PASSPHRASE:"gpg-passphrase",GPG_FINGERPRINT:"gpg-fingerprint",GPG_TRUST_LEVEL:"gpg-trust-level",GIT_SCOPE:"git-scope",GIT_SIGN_USER:"git-sign-user",GIT_SIGN_COMMIT:"git-sign-commit",GIT_SIGN_TAG:"git-sign-tag",GIT_SIGN_PUSH:"git-sign-push",TOKEN:"token"}),ft=()=>{const e=l.getInput(g.GPG_FINGERPRINT);if(e===void 0||e==="")return p.GPG_FINGERPRINT;if(typeof e!="string")throw new Error(`Invalid ${g.GPG_FINGERPRINT} input`,{cause:e});return e},Gt=()=>{const e=l.getInput(g.GIT_SCOPE);if(e===void 0||e==="")return p.GIT_SCOPE;if(typeof e!="string"||!["global","local"].includes(e))throw new Error(`Invalid ${g.GIT_SCOPE} input`,{cause:e});return e},dt=()=>{const e=l.getInput(g.GIT_SIGN_COMMIT);if(e===void 0||e==="")return p.GIT_SIGN_COMMIT;if(typeof e=="boolean")return e;switch(e){case"false":return!1;case"true":return!0;default:throw new Error(`Invalid ${g.GIT_SIGN_COMMIT} input`,{cause:e})}},wt=()=>{const e=l.getInput(g.GIT_SIGN_PUSH);if(e===void 0||e==="")return p.GIT_SIGN_PUSH;if(typeof e=="boolean")return e;switch(e){case"false":return!1;case"true":return!0;case"if-asked":return"if-asked";default:throw new Error(`Invalid ${g.GIT_SIGN_PUSH} input`,{cause:e})}},yt=()=>{const e=l.getInput(g.GIT_SIGN_TAG);if(e===void 0||e==="")return p.GIT_SIGN_TAG;if(typeof e=="boolean")return e;switch(e){case"false":return!1;case"true":return!0;default:throw new Error(`Invalid ${g.GIT_SIGN_TAG} input`,{cause:e})}},mt=()=>{const e=l.getInput(g.GIT_SIGN_USER);if(e===void 0||e==="")return p.GIT_SIGN_USER;if(typeof e=="boolean")return e;switch(e){case"false":return!1;case"true":return!0;default:throw new Error(`Invalid ${g.GIT_SIGN_USER} input`,{cause:e})}},$t=()=>{const e=l.getInput(g.GPG_PASSPHRASE);if(e===void 0||e==="")return p.GPG_PASSPHRASE;if(typeof e!="string")throw new Error(`Invalid ${g.GPG_PASSPHRASE} input`,{cause:e});return e},ht=()=>{const e=l.getInput(g.GPG_PRIVATE_KEY);if(e===void 0||e==="")return p.GPG_PRIVATE_KEY;if(typeof e!="string")throw new Error(`Invalid ${g.GPG_PRIVATE_KEY} input`,{cause:e});return e},It=()=>{const e=l.getInput(g.TOKEN);if(e===void 0||e==="")return p.TOKEN;if(typeof e!="string")throw new Error(`Invalid ${g.TOKEN} input`,{cause:e});return e},Et=()=>{const e=l.getInput(g.GPG_TRUST_LEVEL);if(e===void 0||e==="")return p.GPG_TRUST_LEVEL;const r=Number(e);if(Number.isNaN(r)||r<1||r>5)throw new Error(`Invalid ${g.GPG_TRUST_LEVEL} input`,{cause:e});return r},St=()=>{const e=l.getInput(g.WORKDIR);if(e===void 0||e==="")return p.WORKDIR;if(typeof e!="string")throw new Error(`Invalid ${g.WORKDIR} input`,{cause:e});return e},vt=()=>{const e=ft(),r=Gt(),t=dt(),n=wt(),s=yt(),o=mt(),c=$t(),u=ht(),a=It(),f=Et(),d=St();return{fingerprint:e,gitScope:r,gitSignCommit:t,gitSignPush:n,gitSignTag:s,gitSignUser:o,passphrase:c,privateKey:u,token:a,trustLevel:f,workdir:d}},Tt=async()=>{await I.setConfig("safe.directory",de,"global");const e=vt();let r="",t="GitOps Release",n="gitops-release@users.noreply.github.com",s=G.cwd();const{privateKey:o,token:c}=e;if(o!==void 0){const a=await nt(o,{...e,verbose:!0});r=a.digest,t=a.name,n=a.email,s=a.workdir}const u=await K(pe)(pt,{env:{...G.env,GIT_AUTHOR_NAME:t,GIT_AUTHOR_EMAIL:n,GIT_COMMITTER_NAME:t,GIT_COMMITTER_EMAIL:n,GITHUB_TOKEN:c}});return u!==!1?console.log("release:",u.nextRelease.version):console.warn("failed to release!"),await st(r),s};Tt().then(e=>{console.log("hasil:",e)}).catch(e=>{throw e instanceof Error?e:new Error("Unknown error")});
