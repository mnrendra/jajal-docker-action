"use strict";var l=require("execa");const i=async(e,s=[])=>await l.execa("git",[e,...s]),g=(e,{allowEmpty:s=!1,keyid:t,sign:a=!1}={})=>{const o=[];if(a){const n="-S",r=typeof t=="string"&&t!==""?`${n}${t}`:n;o.push(r)}return s&&o.push("--allow-empty"),[...o,"-m",`${e}`]},f=async(e,s={})=>{const t=g(e,s);return await i("commit",t)},p=(e,{get:s=!1,list:t=!1,unset:a=!1,scope:o="local",value:n}={})=>{const r=[`--${o}`];return n!=null?r.push(`${e}`,`${n.toString()}`):s?r.push("--get",`${e}`):a?r.push("--unset",`${e}`):t&&r.push("--list"),r},c=async(e,s)=>{const t=p(e,s);return await i("config",t)},m=async(e,s="local")=>{const{stdout:t}=await c(e,{get:!0,scope:s});if(t==="false")return!1;if(t==="true")return!0;const a=Number(t);return Number.isNaN(a)?t:a},h=async(e,s,t="local")=>await c(e,{scope:t,value:s}),$=(e,{delete:s=!1,remote:t="origin",signed:a=!1}={})=>{const o=[t,e];return s?[t,"-d",e]:(a!==!1&&o.push(`--signed=${a}`),o)},w=async(e,s={})=>{const t=$(e,s);return await i("push",t)},y=(e,{commit:s,delete:t=!1,message:a="",sign:o=!1}={})=>{if(t)return["-d",e];const n=[];return o&&n.push("-s"),n.push(e),s!==void 0&&n.push(s),[...n,"-m",`${a}`]},d=async(e,s={})=>{const t=y(e,s);return await i("tag",t)},b=e=>({value:e,enumerable:!0,configurable:!1,writable:!1}),v=(e,s)=>{Object.keys(s).forEach(t=>{const a=b(s[t]);Object.defineProperty(e,t,a)})};v(i,{commit:f,config:c,getConfig:m,setConfig:h,push:w,tag:d});const C=({branch:e,nextRelease:s})=>({branch:e.name,version:s.version,tag:s.gitTag,notes:s.notes??""}),N=async({signCommit:e,signTag:s}={},t)=>{const{branch:a,version:o,tag:n,notes:r}=C(t),u=`release: v${o}`;await i.commit(`${u}

${r}`,{sign:e,allowEmpty:!0}),await i.push(a),await i.tag(n,{delete:!0}),await i.tag(n,{sign:s,message:`${u}

${r}`}),await i.push(n,{delete:!0}),await i.push(n)};exports.publish=N;
