"use strict";var u=require("execa");const c=async(e,t=[])=>await u.execa("git",[e,...t]),g=(e,{allowEmpty:t=!1,keyid:s,sign:a=!1}={})=>{const n=[];if(a){const o="-S",r=typeof s=="string"&&s!==""?`${o}${s}`:o;n.push(r)}return t&&n.push("--allow-empty"),[...n,"-m",`${e}`]},f=async(e,t={})=>{const s=g(e,t);return await c("commit",s)},p=(e,{get:t=!1,list:s=!1,unset:a=!1,scope:n="local",value:o}={})=>{const r=[`--${n}`];return o!=null?r.push(`${e}`,`${o.toString()}`):t?r.push("--get",`${e}`):a?r.push("--unset",`${e}`):s&&r.push("--list"),r},i=async(e,t)=>{const s=p(e,t);return await c("config",s)},m=async(e,t="local")=>{const{stdout:s}=await i(e,{get:!0,scope:t});if(s==="false")return!1;if(s==="true")return!0;const a=Number(s);return Number.isNaN(a)?s:a},h=async(e,t,s="local")=>await i(e,{scope:s,value:t}),w=(e,{delete:t=!1,remote:s="origin",signed:a=!1}={})=>{const n=[s,e];return t?[s,"-d",e]:(a!==!1&&n.push(`--signed=${a}`),n)},$=async(e,t={})=>{const s=w(e,t);return await c("push",s)},y=(e,{commit:t,delete:s=!1,message:a="",sign:n=!1}={})=>{if(s)return["-d",e];const o=[];return n&&o.push("-s"),o.push(e),t!==void 0&&o.push(t),[...o,"-m",`${a}`]},d=async(e,t={})=>{const s=y(e,t);return await c("tag",s)},b=e=>({value:e,enumerable:!0,configurable:!1,writable:!1}),v=(e,t)=>{Object.keys(t).forEach(s=>{const a=b(t[s]);Object.defineProperty(e,s,a)})};v(c,{commit:f,config:i,getConfig:m,setConfig:h,push:$,tag:d});const C=(e,t)=>t.split(".").reduce((s,a)=>s?.[a],e),l=(e,t="")=>[...t.matchAll(/{(.*?)}/g)].map(s=>s[1]).reduce((s,a)=>{const n=C(e,a);return s.replace(`{${a}}`,`${n}`)},t),E=({branch:e,nextRelease:t})=>({branch:e.name,version:t.version,tag:t.gitTag,notes:t.notes??""}),N=async({commit:e={},tag:t={}}={},s)=>{const{branch:a,tag:n}=E(s),o=l(s,e.message??""),r=l(s,t.message??"");await c.commit(o,{sign:e.sign??!1,allowEmpty:e.allowEmpty??!1}),await c.push(a),await c.tag(n,{delete:!0}),await c.tag(n,{sign:t.sign??!1,message:r}),await c.push(n,{delete:!0}),await c.push(n)};exports.publish=N;
