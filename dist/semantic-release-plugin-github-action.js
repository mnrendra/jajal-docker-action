"use strict";var i=require("node:fs"),b=require("execa");const S="action.yml",x=".ghaignore",f=".gitignore",F=".backup",I=(s,t)=>{if(!i.existsSync(s))return;let e=s+t;for(;i.existsSync(e);)e=e+t;return i.copyFileSync(s,e),e},R=(s,t)=>t.split(".").reduce((e,n)=>e?.[n],s),$=s=>{const t=new Set;for(const e of s.split(/\r?\n/)){const n=e.split("#")[0].trim();typeof n=="string"&&n!==""&&t.add(n)}return Array.from(t)},w=(s,t="")=>[...t.matchAll(/{(.*?)}/g)].map(e=>e[1]).reduce((e,n)=>{const a=R(s,n);return e.replace(`{${n}}`,`${a}`)},t),q=({branch:s,nextRelease:t})=>({branch:s.name,version:t.version,tag:t.gitTag,notes:t.notes??""}),C=(s,t)=>{const e={ghaIgnores:[],gitIgnores:[]};if(!i.existsSync(s))return e;const n=t??i.readFileSync(s,"utf8");e.ghaIgnores=$(n);const a=I(f,F);return a!==void 0&&(e.backupFile=a,e.gitIgnores=$(a),i.rmSync(f,{force:!0})),i.copyFileSync(s,f),e},N=(s="")=>{i.existsSync(s)&&(i.rmSync(f,{force:!0}),i.copyFileSync(s,f))},o=async(s,t=[])=>await b.execa("git",[s,...t]),k=(s,{force:t=!1}={})=>{const e=[];return t&&e.push("-f"),[...e,"--",s]},A=async(s,t={})=>{const e=k(s,t);return await o("add",e)},E=(s,{allowEmpty:t=!1,keyid:e,sign:n=!1}={})=>{const a=[];if(n){const c="-S",r=typeof e=="string"&&e!==""?`${c}${e}`:c;a.push(r)}return t&&a.push("--allow-empty"),[...a,"-m",`${s}`]},G=async(s,t={})=>{const e=E(s,t);return await o("commit",e)},O=(s,{get:t=!1,list:e=!1,unset:n=!1,scope:a="local",value:c}={})=>{const r=[`--${a}`];return c!=null?r.push(`${s}`,`${c.toString()}`):t?r.push("--get",`${s}`):n?r.push("--unset",`${s}`):e&&r.push("--list"),r},y=async(s,t)=>{const e=O(s,t);return await o("config",e)},_=async(s,t="local")=>{const{stdout:e}=await y(s,{get:!0,scope:t});if(e==="false")return!1;if(e==="true")return!0;const n=Number(e);return Number.isNaN(n)?e:n},U=async(s,t,e="local")=>await y(s,{scope:e,value:t}),j=(s,{tags:t=!1}={})=>{const e=[];let n="";return t===!0&&e.push("--tags"),typeof t=="string"&&(n=t),[...e,s,n]},M=async(s,t={})=>{const e=j(s,t);return await o("ls-remote",e)},T=(s,{delete:t=!1,force:e=!1,remote:n="origin",signed:a=!1}={})=>{const c=[n,s];return t?[n,"-d",s]:(e&&c.push("-f"),a!==!1&&c.push(`--signed=${a}`),c)},P=async(s,t={})=>{const e=T(s,t);return await o("push",e)},B=(s,{quiet:t=!1}={})=>{const e=[];return t&&e.push("-q"),[...e,"--",s]},H=async(s,t={})=>{const e=B(s,t);return await o("reset",e)},K=(s,{cached:t=!1,force:e=!1,ignoreUnmatch:n=!1,quiet:a=!1,recursive:c=!1}={})=>{const r=[];return e&&r.push("-f"),t&&r.push("--cached"),n&&r.push("--ignore-unmatch"),a&&r.push("-q"),c&&r.push("-r"),[...r,"--",s]},L=async(s,t={})=>{const e=K(s,t);return await o("rm",e)},W=(s,{commit:t,delete:e=!1,force:n=!1,list:a=!1,message:c="",sign:r=!1}={})=>{if(e)return["-d",s];if(a)return s===""?["-l"]:["-l",s];const l=[];return n&&l.push("-f"),r&&l.push("-s"),l.push(s),t!==void 0&&l.push(t),[...l,"-m",`${c}`]},X=async(s,t={})=>{const e=W(s,t);return await o("tag",e)},Y=s=>({value:s,enumerable:!0,configurable:!1,writable:!1}),z=(s,t)=>{Object.keys(t).forEach(e=>{const n=Y(t[e]);Object.defineProperty(s,e,n)})};z(o,{add:A,commit:G,config:y,getConfig:_,setConfig:U,lsRemote:M,push:P,reset:H,rm:L,tag:X});const v=async(s,t,{branch:e,message:n,sign:a,tag:c})=>{await o.add(".");for(const r of s)t.includes(r)||await o.rm(r,{force:!0,cached:!0,ignoreUnmatch:!0,recursive:r.endsWith("/"),quiet:!0});for(const r of t)s.includes(r)||await o.add(r,{force:!0});await o.commit(n,{allowEmpty:!0,sign:a}),await o.push(e),!(typeof c!="string"||c==="")&&(await o.tag(c,{force:!0,message:n,sign:a}),await o.push(c,{force:!0}))},D=(s,t)=>{if(!i.existsSync(s))return;const e=i.readFileSync(s,"utf8").split(/\r?\n/),n=/^(\s*)version\s*:\s*([^\s#]+)(\s*)(#.*)?$/,a=/^(\s*)name\s*:\s*(.+)$/;let c=!1,r=-1;for(let u=0;u<e.length;u++){const g=e[u].match(n);if(g!=null){const[,p,,h,d]=g;e[u]=`${p}version: ${t}${h!==""?h:" "}${d!==""?d:""}`,c=!0;break}e[u].match(a)!=null&&(r=u)}if(!c){const u=`version: ${t}`;r>=0?e.splice(r+1,0,u):e.unshift(u)}const l=e.join(`
`);i.rmSync(s,{force:!0}),i.writeFileSync(s,l,"utf8")},J=async({actionFile:s=S,ignoreFile:t=x,ignoreContent:e,latestMessage:n=`latest: v{nextRelease.version}

{nextRelease.notes}`,releaseMessage:a=`release: v{nextRelease.version}

{nextRelease.notes}`,sign:c=!1}={},r)=>{const{branch:l,tag:u,version:g}=q(r),{ghaIgnores:m,gitIgnores:p,backupFile:h}=C(t,e);D(s,g),await v(m,p,{branch:l,message:w(r,a),sign:c,tag:u}),N(h),await v(p,m,{branch:l,message:w(r,n),sign:c})};exports.publish=J;
