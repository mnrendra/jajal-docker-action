"use strict";var G=require("node:child_process");require("@actions/core");var _=require("node:process");const l=(s,e={})=>new Promise((c,n)=>{try{G.exec(s,e,(o,t,r)=>{o!=null&&n(o),c({stdout:t,stderr:r})})}catch(o){n(o)}});Object.freeze({WORKDIR:".",GPG_PRIVATE_KEY:void 0,GPG_PASSPHRASE:void 0,GPG_FINGERPRINT:void 0,GPG_TRUST_LEVEL:void 0,GIT_SCOPE:"local",GIT_SIGN_USER:!0,GIT_SIGN_COMMIT:!1,GIT_SIGN_TAG:!1,GIT_SIGN_PUSH:!1,TOKEN:_.env.GITHUB_TOKEN});const I=({branch:s,nextRelease:e})=>({branch:s.name,version:e.version,tag:e.gitTag,notes:e.notes??""}),T=async(s={},e)=>{const{branch:c,version:n,tag:o,notes:t}=I(e);console.log("options:",s),console.log("branch:",c),console.log("version:",n),console.log("tag:",o),console.log("notes:",t),console.log("-------------- delete local tag ----------");const r=await l(`git tag -d ${o}`);console.log("stderr:",r.stderr),console.log("stdout:",r.stdout),console.log("-------------- delete remote tag ---------");const a=await l(`git push origin -d tag ${o}`);console.log("stderr:",a.stderr),console.log("stdout:",a.stdout);const g=`release: ${o}`;console.log("-------------- commit release ------------");const d=await l(`git commit -S --allow-empty -m "${g}

${t}"`);console.log("stderr:",d.stderr),console.log("stdout:",d.stdout),console.log("-------------- tag release ---------------");const i=await l(`git tag -s ${o} -m "${g}

${t}"`);console.log("stderr:",i.stderr),console.log("stdout:",i.stdout),console.log("-------------- push release --------------");const u=await l("git push origin --follow-tags");console.log("stderr:",u.stderr),console.log("stdout:",u.stdout)};exports.publish=T;
