#!/usr/bin/env node
"use strict";var i=require("node:process"),u=require("node:child_process");require("@actions/core");const r=(o,l={})=>new Promise((s,e)=>{try{u.exec(o,l,(t,n,c)=>{t!=null&&e(t),s({stdout:n,stderr:c})})}catch(t){e(t)}});Object.freeze({WORKDIR:".",GPG_PRIVATE_KEY:void 0,GPG_PASSPHRASE:void 0,GPG_FINGERPRINT:void 0,GPG_TRUST_LEVEL:void 0,GIT_SCOPE:"local",GIT_SIGN_USER:!0,GIT_SIGN_COMMIT:!1,GIT_SIGN_TAG:!1,GIT_SIGN_PUSH:"if-asked",TOKEN:i.env.GITHUB_TOKEN});const G=async()=>{const[o,l,s]=i.argv.slice(2);if(typeof o!="string"||o===""||typeof s!="string"||s==="")return s;const e=`v${o}`,t=`release: ${e}`;console.log("-------------- delete local tag ----------");const n=await r(`git tag -d ${e}`);console.log("stderr:",n.stderr),console.log("stdout:",n.stdout),console.log("-------------- delete remote tag ---------");const c=await r(`git push origin -d tag ${e} --signed=false`);console.log("stderr:",c.stderr),console.log("stdout:",c.stdout),console.log("-------------- commit release ------------");const d=await r(`git commit -S --allow-empty -m "${t}

${l}"`);console.log("stderr:",d.stderr),console.log("stdout:",d.stdout),console.log("-------------- tag release ---------------");const a=await r(`git tag -s ${e} -m "${t}

${l}"`);console.log("stderr:",a.stderr),console.log("stdout:",a.stdout),console.log("-------------- push release --------------");const g=await r("git push origin --follow-tags --signed=false");return console.log("stderr:",g.stderr),console.log("stdout:",g.stdout),s};G().then(o=>{console.log("result:",o)}).catch(o=>{throw o instanceof Error?o:new Error("Unknown error")});
