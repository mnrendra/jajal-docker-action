#!/usr/bin/env node
"use strict";var i=require("node:process"),G=require("node:child_process");require("@actions/core");const s=(o,l={})=>new Promise((r,e)=>{try{G.exec(o,l,(t,n,c)=>{t!=null&&e(t),r({stdout:n,stderr:c})})}catch(t){e(t)}});Object.freeze({WORKDIR:".",GPG_PRIVATE_KEY:void 0,GPG_PASSPHRASE:void 0,GPG_FINGERPRINT:void 0,GPG_TRUST_LEVEL:void 0,GIT_SCOPE:"local",GIT_SIGN_USER:!0,GIT_SIGN_COMMIT:!1,GIT_SIGN_TAG:!1,GIT_SIGN_PUSH:"if-asked",TOKEN:i.env.GITHUB_TOKEN});const u=async()=>{const[o,l,r]=i.argv.slice(2);if(typeof o!="string"||o===""||typeof r!="string"||r==="")return r;const e=`v${o}`,t=`release: ${e}`;console.log("-------------- delete local tag ----------");const n=await s(`git tag -d ${e}`);console.log("stderr:",n.stderr),console.log("stderr:",n.stdout),console.log("-------------- delete remote tag ---------");const c=await s(`git push origin -d tag ${e}`);console.log("stderr:",c.stderr),console.log("stderr:",c.stdout),console.log("-------------- commit release ------------");const d=await s(`git commit -S -m "${t}

${l}"`);console.log("stderr:",d.stderr),console.log("stderr:",d.stdout),console.log("-------------- tag release ---------------");const a=await s(`git tag -s ${e} -m "${t}

${l}"`);console.log("stderr:",a.stderr),console.log("stderr:",a.stdout),console.log("-------------- push release --------------");const g=await s("git push origin --follow-tags");return console.log("stderr:",g.stderr),console.log("stderr:",g.stdout),r};u().then(o=>{console.log("result:",o)}).catch(o=>{throw o instanceof Error?o:new Error("Unknown error")});
