#!/usr/bin/env node
"use strict";var E=require("node:process"),I=require("semantic-release"),M=require("node:child_process");const n="/github/workspace",c="GitOps Releas",a="gitops-release@users.noreply.github.com",T=["alpha","beta","rc"],u=["docs","style","refactor","perf","test","build","ci","chore","revert"],A=T.map(e=>({name:e,prerelease:!0})),p=["+([0-9])?(.{+([0-9]),x}).x","main","next",...A],h=u.map(e=>({type:e,release:"patch"})),R=[["@semantic-release/commit-analyzer",{releaseRules:h}],"@semantic-release/release-notes-generator",["@semantic-release/npm",{npmPublish:!1}],["@semantic-release/exec",{publishCmd:'echo "$GIT_AUTHOR_NAME" && echo "$GIT_AUTHOR_EMAIL" && echo "$GIT_COMMITTER_NAME" && echo "$GIT_COMMITTER_EMAIL" && git config --list'}]],d={branches:p,plugins:R,dryRun:!1,ci:!0},f=(e,o={})=>new Promise((i,s)=>{try{M.exec(e,o,(t,l,_)=>{t!=null&&s(t),i({stdout:l,stderr:_})})}catch(t){s(t)}}),O=e=>{if(typeof e=="function")return e;if(typeof e=="object"&&e!==null&&!Array.isArray(e)&&typeof e.default=="function")return e.default;throw new Error("Invalid module")},r=e=>typeof e=="string"&&e!=="",m=(e={})=>{if(!r(e.GITHUB_TOKEN))throw new Error("github-token is not provided");return r(e.GIT_COMMITTER_NAME)||(e.GIT_COMMITTER_NAME=c),r(e.GIT_COMMITTER_EMAIL)||(e.GIT_COMMITTER_EMAIL=a),r(e.GIT_AUTHOR_NAME)||(e.GIT_AUTHOR_NAME=c),r(e.GIT_AUTHOR_EMAIL)||(e.GIT_AUTHOR_EMAIL=a),e},G=async()=>{E.chdir(n),await f(`git config --global --add safe.directory ${n}`);const e=O(I),o=m(process.env);return await e(d,{env:o})};G().then(e=>{console.log("berhasil:",e)}).catch(e=>{throw e instanceof Error?e:new Error("Unknown error")});
