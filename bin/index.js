#!/usr/bin/env node
"use strict";var c=require("node:process"),k=require("node:child_process"),E=require("node:os"),w=require("node:fs"),$=require("node:path"),R=require("nanoid"),Y=require("openpgp"),B=require("addressparser"),G=require("@actions/core");const v=t=>t.replace(/\r/g,"").trim().split(/\n/),m=(t,r=[],e={})=>new Promise((n,i)=>{try{const o=r.length>0?`${t} ${r.join(" ")}`:t;k.exec(o,e,(u,p,a)=>{u!=null&&i(u);const g=p.trim(),f=v(g),d=a.trim(),P=v(d);n({stdout:g,stdoutLines:f,stderr:d,stderrLines:P})})}catch(o){i(o)}}),_={cwd:c.cwd(),verbose:!1},z=t=>{Object.keys(t).forEach(r=>{_[r]=t[r]})},s=t=>{_.verbose&&console.log(t)},X=t=>{if(typeof t=="function")return t;if(typeof t=="object"&&t!==null&&!Array.isArray(t)&&typeof t.default=="function")return t.default;throw new Error("Invalid module")},b=(t,r,e)=>{try{let n=r+t.toString(),i=n.indexOf(E.EOL);for(;i>-1;){const o=n.substring(0,i);typeof e=="function"&&e(o),n=n.substring(i+E.EOL.length),i=n.indexOf(E.EOL)}return n}catch(n){throw n instanceof Error?n:new Error("Unknown error",{cause:n})}},J=(t,r=[],e={})=>new Promise((n,i)=>{try{const o=k.spawn(t,r,e);let u="";o.stdout.on("data",a=>{u=b(a,u)});let p="";o.stderr.on("data",a=>{p=b(a,p)}),o.on("error",a=>{o.removeAllListeners(),i(a)}),o.on("close",a=>{o.removeAllListeners();const g=p.trim(),f=v(g),d=u.trim(),P=v(d);n({code:a,stdout:g,stdoutLines:f,stderr:d,stderrLines:P})}),e.input!==void 0&&o.stdin.end(e.input)}catch(o){i(o)}}),Q=t=>{if(t!==void 0){if(typeof t!="string"||t==="")throw new Error("Invalid fingerprint value",{cause:t});return t}},Z=(t="local")=>{if(typeof t!="string"||!["global","local"].includes(t))throw new Error("Invalid gitScope value",{cause:t});return t},tt=(t=!1)=>{if(typeof t!="boolean")throw new Error("Invalid gitSignCommit value",{cause:t});return t},et=(t="if-asked")=>{if(typeof t!="boolean"&&(typeof t!="string"||t!=="if-asked"))throw new Error("Invalid gitSignPush value",{cause:t});return t},rt=(t=!1)=>{if(typeof t!="boolean")throw new Error("Invalid gitSignTag value",{cause:t});return t},nt=(t=!0)=>{if(typeof t!="boolean")throw new Error("Invalid gitSignUser value",{cause:t});return t},it=t=>{if(t!==void 0){if(typeof t!="string"||t==="")throw new Error("Invalid passphrase value",{cause:t});return t}},ot=t=>{if(t===void 0)return;const r=Number(t);if(Number.isNaN(r)||r<1||r>5)throw new Error("Invalid trustLevel value",{cause:t});return t},st=(t=!1)=>{if(typeof t!="boolean")throw new Error("Invalid verbose value",{cause:t});return t},at=t=>{try{return w.statSync(t).isDirectory()}catch{return!1}},gt=(t=".")=>{if(typeof t!="string"||t==="")throw new Error("Invalid workdir value",{cause:t});if(!at(t))throw new Error(`workdir ${t} is doesn't exist`,{cause:t});return t},ct=t=>{if(typeof t!="object"||t===null||Array.isArray(t))throw new Error("Invalid options value",{cause:t});const r=gt(t.workdir),e=it(t.passphrase),n=Q(t.fingerprint),i=ot(t.trustLevel),o=Z(t.gitScope),u=nt(t.gitSignUser),p=tt(t.gitSignCommit),a=rt(t.gitSignTag),g=et(t.gitSignPush),f=st(t.verbose);return z({..._,verbose:f}),s("---------------- importGPG's options to use -------------:"),s(`workdir         : ${r}`),s(`passphrase      : ${e}`),s(`fingerprint     : ${n}`),s(`trustLevel      : ${i}`),s(`gitScope        : ${o}`),s(`gitSignUser     : ${u}`),s(`gitSignCommit   : ${p}`),s(`gitSignTag      : ${a}`),s(`gitSignPush     : ${g}`),s(`verbose         : ${f}`),{workdir:r,passphrase:e,fingerprint:n,trustLevel:i,gitScope:o,gitSignUser:u,gitSignCommit:p,gitSignTag:a,gitSignPush:g,verbose:f}},O=async(t=[])=>await m("git",t),S=async(t,r=!1)=>{const e=["config","--get"];r&&e.push("--global"),e.push(t);const{stdout:n}=await O(e);return n==="true"?!0:n==="false"?!1:n},T=async(t,r,e=!1)=>{const n=["config"];e&&n.push("--global"),n.push(t,r),await O(n)},ut="gpg-agent.conf",pt={RELOADAGENT:"RELOADAGENT"},A=".gnupg",lt={WIN32:"win32"},ft=`default-cache-ttl 21600
max-cache-ttl 31536000
allow-preset-passphrase
`,N=async t=>{const{stdout:r}=await m(`gpg-connect-agent "${t}" /bye`);return r},Gt=async(t,r)=>{const e=$.join(t,ut);w.writeFileSync(e,r),await N(pt.RELOADAGENT)},h=async(t=[])=>await m("gpg",t),It=async(t=[])=>await m("gpgconf",t),dt=(t,r)=>t.slice(r.length+1).replace("%3a",":").trim(),L=async()=>{const{stdoutLines:t}=await It(["--list-dirs"]),r={libdir:"",libexecdir:"",datadir:"",homedir:""};return t.forEach(e=>{Object.keys(r).forEach(n=>{const i=n;e.startsWith(`${i}:`)&&(r[i]=dt(e,i))})}),Object.keys(r).forEach(e=>{const n=r[e];if(typeof n!="string"||n==="")throw new Error(`Invalid GPG ${e}`,{cause:n})}),r},yt=async()=>{const{GNUPGHOME:t,HOME:r,USERPROFILE:e}=c.env;if(typeof t=="string"&&t!=="")return t;if(typeof r=="string"&&r!=="")return $.join(r,A);if(typeof e=="string"&&e!==""&&E.platform()===lt.WIN32)return $.join(e,A);const{homedir:n}=await L();return n},wt=async()=>{const t=await yt();if(t.length===0)throw new Error("Unable to determine GnuPG home directory",{cause:t});return w.existsSync(t)||w.mkdirSync(t,{recursive:!0}),t},St=(t,r)=>{let e="",n=!1;const i=v(t);for(const o of i){if(o.startsWith("fpr:")&&o.includes(`:${r}:`)){n=!0;continue}if(o.startsWith("grp:")&&n){e=o.replace(/(grp|:)/g,"").trim();break}}return e},Tt=async t=>{const r=["--batch","--with-colons","--with-keygrip","--list-secret-keys",t],{stdout:e}=await h(r);return St(e,t)},Pt=async t=>{const r=["--batch","--with-colons","--with-keygrip","--list-secret-keys",t],{stdoutLines:e}=await h(r),n=[];return e.forEach(i=>{i.startsWith("grp")&&n.push(i.replace(/(grp|:)/g,"").trim())}),n},U=(t,r)=>t.slice(r.length+1).trim(),Et=async()=>{const t=["--version"],{stdoutLines:r}=await h(t),e={gnupg:"",libgcrypt:""};return r.forEach(n=>{n.startsWith("gpg (GnuPG) ")?e.gnupg=U(n,"gpg (GnuPG)"):n.startsWith("gpg (GnuPG/MacGPG2) ")?e.gnupg=U(n,"gpg (GnuPG/MacGPG2)"):n.startsWith("libgcrypt ")&&(e.libgcrypt=U(n,"libgcrypt"))}),Object.keys(e).forEach(n=>{const i=e[n];if(typeof i!="string"||i==="")throw new Error(`Invalid GPG ${n}`,{cause:i})}),e},vt=t=>t.trimStart().startsWith("---"),C=t=>vt(t)?t:Buffer.from(t,"base64").toString(),$t=async t=>{const r=C(t),e=await Y.readKey({armoredKey:r}),{user:n}=await e.getPrimaryUser(),i=e.getFingerprint().toUpperCase(),o=e.getKeyID().toHex().toUpperCase(),u=X(B),{name:p,address:a}=u(n.userID?.userID??"")[0],g=e.getCreationTime();return{digest:i,id:o,name:p,email:a,creationTime:g}},mt=async t=>{const r=$.join(E.tmpdir(),`mnrendra-import-gpg-${R.nanoid()}`),e=w.mkdtempSync(r),n=`${e}/${R.nanoid()}.pgp`,i=C(t);w.writeFileSync(n,i,{mode:384});const o=["--import","--batch","--yes",n],{stdout:u,stderr:p}=await h(o);return p!==""?p:(w.unlinkSync(n),w.rmSync(e),u)},K=async(t,r)=>{const e=Buffer.from(r,"utf8").toString("hex").toUpperCase();return await N(`PRESET_PASSPHRASE ${t} -1 ${e}`),await N(`KEYINFO ${t}`)},ht=async(t=[],r={})=>await J("gpg",t,r),_t=async(t,r)=>{const e=["--batch","--no-tty","--command-fd","0","--edit-key",t],n=Buffer.from(`trust
${r}
y
quit
`);await ht(e,{input:n})},H="user.signingkey",M="user.name",F="user.email",D="commit.gpgsign",W="tag.gpgsign",V="push.gpgsign",Nt=async(t,r,e,{scope:n,signUser:i,signCommit:o,signTag:u,signPush:p})=>{s("---------------- Git Configs -----------------------------:");const a={scope:"local",userSigningkey:"",commitGpgsign:!1,tagGpgsign:!1,pushGpgsign:"if-asked",userName:"",userEmail:""},g=n==="global";return a.scope=n,s(`scope           : ${a.scope}`),i&&(await T(H,t,g),a.userSigningkey=await S(H,g),s(`user.signingkey : ${a.userSigningkey}`),await T(M,r,g),a.userName=await S(M,g),s(`user.name       : ${a.userName}`),await T(F,e,g),a.userEmail=await S(F,g),s(`user.email      : ${a.userEmail}`)),o&&(await T(D,`${o}`,g),a.commitGpgsign=await S(D,g),s(`commit.gpgsign  : ${a.commitGpgsign}`)),u&&(await T(W,`${u}`,g),a.tagGpgsign=await S(W,g),s(`tag.gpgsign     : ${a.tagGpgsign}`)),p!==!1&&(await T(V,`${p}`,g),a.pushGpgsign=await S(V,g),s(`push.gpgsign    : ${a.pushGpgsign}`)),a},Ut=async(t,r,e)=>{const n={gpgHome:"",keygripPairs:[]};if(e===void 0)return n;const i=await wt();if(await Gt(i,ft),n.gpgHome=i,s("---------------- Configured GnuPG agent ------------------:"),s(`GnuPG home      : ${i}`),r!==void 0){s("---------------- Getting keygrip for fingerprint ---------:");const o=await Tt(r);s(`Presetting passphrase for key ${r} with keygrip ${o}`);const u=await K(o,e);n.keygripPairs=[{keygrip:o,keyinfo:u}]}else{s("---------------- Getting keygrips ------------------------:");const o=await Pt(t),u=[];for(const p of o){s(`Presetting passphrase for ${p}`);const a=await K(p,e);u.push({keygrip:p,keyinfo:a})}n.keygripPairs=u}return n},kt=async()=>{const t=await Et(),r=await L(),e={...t,...r};Object.keys(e).forEach(i=>{const o=e[i];if(typeof o!="string"&&o==="")throw new Error(`Invalid GPG ${i} value`,{cause:o})});const n=`${e.gnupg} (libgcrypt ${e.libgcrypt})`;return s("---------------- GnuPG info ------------------------------:"),s(`Version         : ${n}`),s(`Libdir          : ${e.libdir}`),s(`Libexecdir      : ${e.libexecdir}`),s(`Datadir         : ${e.datadir}`),s(`Homedir         : ${e.homedir}`),{...e,version:n}},Rt=async t=>{const{digest:r,id:e,name:n,email:i,creationTime:o}=await $t(t);return s("---------------- GPG private key info --------------------:"),s(`Fingerprint     : ${r}`),s(`KeyID           : ${e}`),s(`Name            : ${n}`),s(`Email           : ${i}`),s(`CreationTime    : ${o.toUTCString()}`),{digest:r,id:e,name:n,email:i,creationTime:o}},bt=async(t,r)=>{s("---------------- Importing GPG private key ---------------:");const e=await mt(t);return s(e),e},Ot=(t,r)=>{s("---------------- Fingerprint to use ----------------------:"),s(r??t)},At=async(t,r)=>{if(r===void 0)return"";const e=Number(r);if(Number.isNaN(e)||e<1||e>5)throw new Error("Invalid GPG Trust Level value",{cause:r});return s("---------------- Setting key's trust level --------------:"),await _t(t,r),s(`Trust level set to ${r} for ${t}`),`Trust level set to ${r} for ${t}`},Lt=(t,r)=>{console.log("import-gpg-workdir:",c.cwd()),t!=="."&&(s("---------------- Change working directory ----------------:"),c.chdir(t),s(`Using ${t} as working directory...`))},Ct=async(t,r={})=>{try{if(typeof t!="string"||t==="")throw new Error("Invalid GnuPG private key",{cause:t});const e=ct(r),{workdir:n,fingerprint:i,passphrase:o,trustLevel:u}=e;Lt(n);const p=await kt(),a=await Rt(t),{digest:g,id:f,name:d,email:P}=a;Ot(g,i);const j=await bt(t),x=await Ut(g,i,o);await At(f,u);const q={scope:e.gitScope,signUser:e.gitSignUser,signCommit:e.gitSignCommit,signTag:e.gitSignTag,signPush:e.gitSignPush},y=await Nt(f,d,P,q);return{...p,...a,...x,...y,keyId:a.id,fingerprint:a.digest,log:j,trustLevel:u,gitConfigScope:y.scope,gitUserSigningkey:y.userSigningkey,gitUserName:y.userName,gitUserEmail:y.userEmail,gitCommitGpgsign:y.commitGpgsign,gitTagGpgsign:y.tagGpgsign,gitPushGpgsign:y.pushGpgsign}}catch(e){throw e instanceof Error?e:new Error("Unknown error",{cause:e})}},I=Object.freeze({WORKDIR:".",GPG_PRIVATE_KEY:void 0,GPG_PASSPHRASE:void 0,GPG_FINGERPRINT:void 0,GPG_TRUST_LEVEL:void 0,GIT_SCOPE:"local",GIT_SIGN_USER:!0,GIT_SIGN_COMMIT:!1,GIT_SIGN_TAG:!1,GIT_SIGN_PUSH:"if-asked",TOKEN:c.env.GITHUB_TOKEN}),l=Object.freeze({WORKDIR:"workdir",GPG_PRIVATE_KEY:"gpg-private-key",GPG_PASSPHRASE:"gpg-passphrase",GPG_FINGERPRINT:"gpg-fingerprint",GPG_TRUST_LEVEL:"gpg-trust-level",GIT_SCOPE:"git-scope",GIT_SIGN_USER:"git-sign-user",GIT_SIGN_COMMIT:"git-sign-commit",GIT_SIGN_TAG:"git-sign-tag",GIT_SIGN_PUSH:"git-sign-push",TOKEN:"token"}),Kt=()=>{const t=G.getInput(l.GPG_FINGERPRINT);if(t===void 0||t==="")return I.GPG_FINGERPRINT;if(typeof t!="string")throw new Error(`Invalid ${l.GPG_FINGERPRINT} input`,{cause:t});return t},Ht=()=>{const t=G.getInput(l.GIT_SCOPE);if(t===void 0||t==="")return I.GIT_SCOPE;if(typeof t!="string"||!["global","local"].includes(t))throw new Error(`Invalid ${l.GIT_SCOPE} input`,{cause:t});return t},Mt=()=>{const t=G.getInput(l.GIT_SIGN_COMMIT);if(t===void 0||t==="")return I.GIT_SIGN_COMMIT;if(typeof t=="boolean")return t;switch(t){case"false":return!1;case"true":return!0;default:throw new Error(`Invalid ${l.GIT_SIGN_COMMIT} input`,{cause:t})}},Ft=()=>{const t=G.getInput(l.GIT_SIGN_PUSH);if(t===void 0||t==="")return I.GIT_SIGN_PUSH;if(typeof t=="boolean")return t;switch(t){case"false":return!1;case"true":return!0;case"if-asked":return"if-asked";default:throw new Error(`Invalid ${l.GIT_SIGN_PUSH} input`,{cause:t})}},Dt=()=>{const t=G.getInput(l.GIT_SIGN_TAG);if(t===void 0||t==="")return I.GIT_SIGN_TAG;if(typeof t=="boolean")return t;switch(t){case"false":return!1;case"true":return!0;default:throw new Error(`Invalid ${l.GIT_SIGN_TAG} input`,{cause:t})}},Wt=()=>{const t=G.getInput(l.GIT_SIGN_USER);if(t===void 0||t==="")return I.GIT_SIGN_USER;if(typeof t=="boolean")return t;switch(t){case"false":return!1;case"true":return!0;default:throw new Error(`Invalid ${l.GIT_SIGN_USER} input`,{cause:t})}},Vt=()=>{const t=G.getInput(l.GPG_PASSPHRASE);if(t===void 0||t==="")return I.GPG_PASSPHRASE;if(typeof t!="string")throw new Error(`Invalid ${l.GPG_PASSPHRASE} input`,{cause:t});return t},jt=()=>{const t=G.getInput(l.GPG_PRIVATE_KEY);if(t===void 0||t==="")return I.GPG_PRIVATE_KEY;if(typeof t!="string")throw new Error(`Invalid ${l.GPG_PRIVATE_KEY} input`,{cause:t});return t},xt=()=>{const t=G.getInput(l.TOKEN);if(t===void 0||t==="")return I.TOKEN;if(typeof t!="string")throw new Error(`Invalid ${l.TOKEN} input`,{cause:t});return t},qt=()=>{const t=G.getInput(l.GPG_TRUST_LEVEL);if(t===void 0||t==="")return I.GPG_TRUST_LEVEL;const r=Number(t);if(Number.isNaN(r)||r<1||r>5)throw new Error(`Invalid ${l.GPG_TRUST_LEVEL} input`,{cause:t});return r},Yt=()=>{const t=G.getInput(l.WORKDIR);if(t===void 0||t==="")return I.WORKDIR;if(typeof t!="string")throw new Error(`Invalid ${l.WORKDIR} input`,{cause:t});return t},Bt=()=>{const t=Kt(),r=Ht(),e=Mt(),n=Ft(),i=Dt(),o=Wt(),u=Vt(),p=jt(),a=xt(),g=qt(),f=Yt();return{fingerprint:t,gitScope:r,gitSignCommit:e,gitSignPush:n,gitSignTag:i,gitSignUser:o,passphrase:u,privateKey:p,token:a,trustLevel:g,workdir:f}},zt=async()=>{console.log("-------main-bagong-------");const{workdir:t,privateKey:r,passphrase:e,fingerprint:n,trustLevel:i,gitScope:o,gitSignUser:u,gitSignCommit:p,gitSignTag:a,gitSignPush:g,token:f}=Bt();if(console.log("workdir:",t,"|",typeof t,"|",c.env.INPUT_WORKDIR,"|",typeof c.env.INPUT_WORKDIR),console.log("privateKey:",r,"|",typeof r,"|",c.env["INPUT_GPG-PRIVATE-KEY"],"|",typeof c.env["INPUT_GPG-PRIVATE-KEY"]),console.log("passphrase:",e,"|",typeof e,"|",c.env["INPUT_GPG-PASSPHRASE"],"|",typeof c.env["INPUT_GPG-PASSPHRASE"]),console.log("fingerprint:",n,"|",typeof n,"|",c.env["INPUT_GPG-FINGERPRINT"],"|",typeof c.env["INPUT_GPG-FINGERPRINT"]),console.log("trustLevel:",i,"|",typeof i,"|",c.env["INPUT_GPG-TRUST-LEVEL"],"|",typeof c.env["INPUT_GPG-TRUST-LEVEL"]),console.log("gitScope:",o,"|",typeof o,"|",c.env["INPUT_GIT-SCOPE"],"|",typeof c.env["INPUT_GIT-SCOPE"]),console.log("gitSignUser:",u,"|",typeof u,"|",c.env["INPUT_GIT-SIGN-USER"],"|",typeof c.env["INPUT_GIT-SIGN-USER"]),console.log("gitSignCommit:",p,"|",typeof p,"|",c.env["INPUT_GIT-SIGN-COMMIT"],"|",typeof c.env["INPUT_GIT-SIGN-COMMIT"]),console.log("gitSignTag:",a,"|",typeof a,"|",c.env["INPUT_GIT-SIGN-TAG"],"|",typeof c.env["INPUT_GIT-SIGN-TAG"]),console.log("gitSignPush:",g,"|",typeof g,"|",c.env["INPUT_GIT-SIGN-PUSH"],"|",typeof c.env["INPUT_GIT-SIGN-PUSH"]),console.log("token:",f,"|",typeof f,"|",c.env.INPUT_TOKEN,"|",typeof c.env.INPUT_TOKEN),console.log(c.env.GITHUB_TOKEN),console.log(typeof c.env.GITHUB_TOKEN),console.log(c.env.INPUT_TOKEN===c.env.GITHUB_TOKEN),console.log(c.cwd()),r!==void 0){const d=await Ct(r,{workdir:t,passphrase:e,fingerprint:n,trustLevel:i,gitScope:o,gitSignUser:u,gitSignCommit:p,gitSignTag:a,gitSignPush:g,verbose:!0});console.log("outputs:",d)}};zt().then(t=>{console.log("result:",t)}).catch(t=>{throw t instanceof Error?t:new Error("Unknown error")});
