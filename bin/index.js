#!/usr/bin/env node
"use strict";var p=require("node:process"),t=require("@actions/core"),E=require("semantic-release"),T=require("node:child_process");const l="/github/workspace",I="GitOps Releas",u="gitops-release@users.noreply.github.com",m=["alpha","beta","rc"],g=["docs","style","refactor","perf","test","build","ci","chore","revert"],_=m.map(e=>({name:e,prerelease:!0})),M=["+([0-9])?(.{+([0-9]),x}).x","main","next",..._],A=g.map(e=>({type:e,release:"patch"})),h=[["@semantic-release/commit-analyzer",{releaseRules:A}],"@semantic-release/release-notes-generator",["@semantic-release/npm",{npmPublish:!1}],["@semantic-release/exec",{publishCmd:'./bin/script.js "${nextRelease.version}" "${nextRelease.notes}" "${branch.name}"'}],"@semantic-release/github"],R={branches:M,plugins:h,dryRun:!1,ci:!0},v=(e,n={})=>new Promise((a,o)=>{try{T.exec(e,n,(r,i,c)=>{r!=null&&o(r),a({stdout:i,stderr:c})})}catch(r){o(r)}}),d=e=>{if(typeof e=="function")return e;if(typeof e=="object"&&e!==null&&!Array.isArray(e)&&typeof e.default=="function")return e.default;throw new Error("Invalid module")},s=e=>typeof e=="string"&&e!=="",f=(e={})=>{if(!s(e.GITHUB_TOKEN))throw new Error("github-token is not provided");return s(e.GIT_COMMITTER_NAME)||(e.GIT_COMMITTER_NAME=I),s(e.GIT_COMMITTER_EMAIL)||(e.GIT_COMMITTER_EMAIL=u),s(e.GIT_AUTHOR_NAME)||(e.GIT_AUTHOR_NAME=I),s(e.GIT_AUTHOR_EMAIL)||(e.GIT_AUTHOR_EMAIL=u),e},O=async()=>{p.chdir(l);const e=t.getInput("git-author-name"),n=t.getInput("git-author-email"),a=t.getInput("git-committer-name"),o=t.getInput("git-committer-email"),r=t.getInput("gpg-passphrase");console.log("gitAuthorName:",e,"env:",process.env["INPUT_GIT-AUTHOR-NAME"]),console.log("gitAuthorEmail:",n,"env:",process.env["INPUT_GIT-AUTHOR-EMAIL"]),console.log("gitCommitterName:",a,"env:",process.env["INPUT_GIT-COMMITTER-NAME"]),console.log("gitCommitterEmail:",o,"env:",process.env["INPUT_GIT-COMMITTER-NAME"]),console.log("gpgPassphrase:",r,"env:",process.env["INPUT_GIT-PASSPHRASE"]),await v(`git config --global --add safe.directory ${l}`);const i=d(E),c=f(process.env);return await i(R,{env:c})};O().then(e=>{console.log("result:",e)}).catch(e=>{throw e instanceof Error?e:new Error("Unknown error")});
