#!/usr/bin/env node
"use strict";var E=require("node:process"),_=require("semantic-release"),I=require("node:child_process");const o="/github/workspace",a="GitOps Releas",c="gitops-release@users.noreply.github.com",p=["alpha","beta","rc"],M=["docs","style","refactor","perf","test","build","ci","chore","revert"],T=p.map(e=>({name:e,prerelease:!0})),d=["+([0-9])?(.{+([0-9]),x}).x","main","next",...T],R=M.map(e=>({type:e,release:"patch"})),h=[["@semantic-release/commit-analyzer",{releaseRules:R}],"@semantic-release/release-notes-generator",["@semantic-release/npm",{npmPublish:!1}],["@semantic-release/exec",{publishCmd:"./bin/script.js ${nextRelease.version} ${nextRelease.notes} ${branch.name}"}]],A={branches:d,plugins:h,dryRun:!1,ci:!0},f=(e,s={})=>new Promise((i,n)=>{try{I.exec(e,s,(t,l,u)=>{t!=null&&n(t),i({stdout:l,stderr:u})})}catch(t){n(t)}}),m=e=>{if(typeof e=="function")return e;if(typeof e=="object"&&e!==null&&!Array.isArray(e)&&typeof e.default=="function")return e.default;throw new Error("Invalid module")},r=e=>typeof e=="string"&&e!=="",b=(e={})=>{if(!r(e.GITHUB_TOKEN))throw new Error("github-token is not provided");return r(e.GIT_COMMITTER_NAME)||(e.GIT_COMMITTER_NAME=a),r(e.GIT_COMMITTER_EMAIL)||(e.GIT_COMMITTER_EMAIL=c),r(e.GIT_AUTHOR_NAME)||(e.GIT_AUTHOR_NAME=a),r(e.GIT_AUTHOR_EMAIL)||(e.GIT_AUTHOR_EMAIL=c),e},y=async()=>{E.chdir(o),await f(`git config --global --add safe.directory ${o}`);const e=m(_),s=b(process.env);return await e(A,{env:s})};y().then(e=>{console.log("berhasil:",e)}).catch(e=>{throw e instanceof Error?e:new Error("Unknown error")});
