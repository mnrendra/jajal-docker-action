#!/usr/bin/env node
"use strict";var G=require("node:process"),R=require("node:child_process"),P=require("node:os"),y=require("node:fs"),T=require("node:path"),L=require("nanoid"),et=require("openpgp"),rt=require("addressparser"),f=require("@actions/core");const $={cwd:G.cwd(),verbose:!1},C=t=>{Object.keys(t).forEach(e=>{$[e]=t[e]})},N=(t,e,r="\x1B[39m")=>t.split(`
`).map(n=>(n=e+n,n=n.endsWith("\r")?n.slice(0,-1)+r+"\r":n+r,n)).join(`
`),O=t=>{$.verbose&&console.log(N(t,"\x1B[90m"))},_=t=>t.replace(/\r/g,"").trim().split(/\n/),k=(t,e=[],r={})=>new Promise((n,i)=>{try{const s=e.length>0?`${t} ${e.join(" ")}`:t;R.exec(s,r,(g,u,a)=>{g!=null&&i(g);const c=u.trim(),l=_(c),m=a.trim(),v=_(m);n({stdout:c,stdoutLines:l,stderr:m,stderrLines:v})})}catch(s){i(s)}}),o=t=>{$.verbose&&console.log(t)},nt=t=>{if(typeof t=="function")return t;if(typeof t=="object"&&t!==null&&!Array.isArray(t)&&typeof t.default=="function")return t.default;throw new Error("Invalid module")},K=()=>{const t=G.cwd(),e=$.cwd;t!==e&&(o("---------------- Restore working directory ---------------:"),G.chdir(e),o(`Restore working directory to ${e}.`))},x=(t,e,r)=>{try{let n=e+t.toString(),i=n.indexOf(P.EOL);for(;i>-1;){const s=n.substring(0,i);typeof r=="function"&&r(s),n=n.substring(i+P.EOL.length),i=n.indexOf(P.EOL)}return n}catch(n){throw n instanceof Error?n:new Error("Unknown error",{cause:n})}},it=(t,e=[],r={})=>new Promise((n,i)=>{try{const s=R.spawn(t,e,r);let g="";s.stdout.on("data",a=>{g=x(a,g)});let u="";s.stderr.on("data",a=>{u=x(a,u)}),s.on("error",a=>{s.removeAllListeners(),i(a)}),s.on("close",a=>{s.removeAllListeners();const c=u.trim(),l=_(c),m=g.trim(),v=_(m);n({code:a,stdout:c,stdoutLines:l,stderr:m,stderrLines:v})}),r.input!==void 0&&s.stdin.end(r.input)}catch(s){i(s)}}),U=t=>{$.verbose&&console.log(N(t,"\x1B[32m"))},st=t=>{if(t!==void 0){if(typeof t!="string"||t==="")throw new Error("Invalid fingerprint value",{cause:t});return t}},ot=(t="local")=>{if(typeof t!="string"||!["global","local"].includes(t))throw new Error("Invalid gitScope value",{cause:t});return t},at=(t=!1)=>{if(typeof t!="boolean")throw new Error("Invalid gitSignCommit value",{cause:t});return t},ct=(t="if-asked")=>{if(typeof t!="boolean"&&(typeof t!="string"||t!=="if-asked"))throw new Error("Invalid gitSignPush value",{cause:t});return t},gt=(t=!1)=>{if(typeof t!="boolean")throw new Error("Invalid gitSignTag value",{cause:t});return t},ut=(t=!0)=>{if(typeof t!="boolean")throw new Error("Invalid gitSignUser value",{cause:t});return t},pt=t=>{if(t!==void 0){if(typeof t!="string"||t==="")throw new Error("Invalid passphrase value",{cause:t});return t}},lt=t=>{if(t===void 0)return;const e=Number(t);if(Number.isNaN(e)||e<1||e>5)throw new Error("Invalid trustLevel value",{cause:t});return t},ft=(t=!1)=>{if(typeof t!="boolean")throw new Error("Invalid verbose value",{cause:t});return t},dt=t=>{try{return y.statSync(t).isDirectory()}catch{return!1}},Gt=(t=".")=>{if(typeof t!="string"||t==="")throw new Error("Invalid workdir value",{cause:t});if(!dt(t))throw new Error(`workdir ${t} is doesn't exist`,{cause:t});return t},wt=t=>{if(typeof t!="object"||t===null||Array.isArray(t))throw new Error("Invalid options value",{cause:t});const e=Gt(t.workdir),r=pt(t.passphrase),n=st(t.fingerprint),i=lt(t.trustLevel),s=ot(t.gitScope),g=ut(t.gitSignUser),u=at(t.gitSignCommit),a=gt(t.gitSignTag),c=ct(t.gitSignPush),l=ft(t.verbose);return C({...$,verbose:l}),o("---------------- importGPG's options to use -------------:"),o(`workdir         : ${e}`),o(`passphrase      : ${r}`),o(`fingerprint     : ${n}`),o(`trustLevel      : ${i}`),o(`gitScope        : ${s}`),o(`gitSignUser     : ${g}`),o(`gitSignCommit   : ${u}`),o(`gitSignTag      : ${a}`),o(`gitSignPush     : ${c}`),o(`verbose         : ${l}`),{workdir:e,passphrase:r,fingerprint:n,trustLevel:i,gitScope:s,gitSignUser:g,gitSignCommit:u,gitSignTag:a,gitSignPush:c,verbose:l}},H=t=>{if($.verbose){const e="\x1B[33m";console.log(N("WARNING:",e)),console.log(N(t,e))}},M=async(t=[])=>await k("git",t),h=async(t,e=!1)=>{const r=["config","--get"];e&&r.push("--global"),r.push(t);const{stdout:n}=await M(r);return n==="true"?!0:n==="false"?!1:n},S=async(t,e,r=!1)=>{const n=["config"];r&&n.push("--global"),n.push(t,e),await M(n)},yt="gpg-agent.conf",$t={RELOADAGENT:"RELOADAGENT"},W=".gnupg",mt={WIN32:"win32"},ht=`default-cache-ttl 21600
max-cache-ttl 31536000
allow-preset-passphrase
`,b=async t=>{const{stdout:e}=await k(`gpg-connect-agent "${t}" /bye`);return e},St=async(t,e)=>{const r=T.join(t,yt);y.writeFileSync(r,e),await b($t.RELOADAGENT)},I=async(t=[])=>await k("gpg",t),It=async t=>{const e=["--batch","--yes",t],r=n=>[...e.slice(0,2),n,...e.slice(-1)];await I(r("--delete-secret-keys")),await I(r("--delete-keys"))},Et=async(t=[])=>await k("gpgconf",t),vt=(t,e)=>t.slice(e.length+1).replace("%3a",":").trim(),F=async()=>{const{stdoutLines:t}=await Et(["--list-dirs"]),e={libdir:"",libexecdir:"",datadir:"",homedir:""};return t.forEach(r=>{Object.keys(e).forEach(n=>{const i=n;r.startsWith(`${i}:`)&&(e[i]=vt(r,i))})}),Object.keys(e).forEach(r=>{const n=e[r];if(typeof n!="string"||n==="")throw new Error(`Invalid GPG ${r}`,{cause:n})}),e},Pt=async()=>{const{GNUPGHOME:t,HOME:e,USERPROFILE:r}=G.env;if(typeof t=="string"&&t!=="")return t;if(typeof e=="string"&&e!=="")return T.join(e,W);if(typeof r=="string"&&r!==""&&P.platform()===mt.WIN32)return T.join(r,W);const{homedir:n}=await F();return n},Tt=async()=>{const t=await Pt();if(t.length===0)throw new Error("Unable to determine GnuPG home directory",{cause:t});return y.existsSync(t)||y.mkdirSync(t,{recursive:!0}),t},_t=(t,e)=>{let r="",n=!1;const i=_(t);for(const s of i){if(s.startsWith("fpr:")&&s.includes(`:${e}:`)){n=!0;continue}if(s.startsWith("grp:")&&n){r=s.replace(/(grp|:)/g,"").trim();break}}return r},Nt=async t=>{const e=["--batch","--with-colons","--with-keygrip","--list-secret-keys",t],{stdout:r}=await I(e);return _t(r,t)},kt=async t=>{const e=["--batch","--with-colons","--with-keygrip","--list-secret-keys",t],{stdoutLines:r}=await I(e),n=[];return r.forEach(i=>{i.startsWith("grp")&&n.push(i.replace(/(grp|:)/g,"").trim())}),n},A=(t,e)=>t.slice(e.length+1).trim(),bt=async()=>{const t=["--version"],{stdoutLines:e}=await I(t),r={gnupg:"",libgcrypt:""};return e.forEach(n=>{n.startsWith("gpg (GnuPG) ")?r.gnupg=A(n,"gpg (GnuPG)"):n.startsWith("gpg (GnuPG/MacGPG2) ")?r.gnupg=A(n,"gpg (GnuPG/MacGPG2)"):n.startsWith("libgcrypt ")&&(r.libgcrypt=A(n,"libgcrypt"))}),Object.keys(r).forEach(n=>{const i=r[n];if(typeof i!="string"||i==="")throw new Error(`Invalid GPG ${n}`,{cause:i})}),r},Rt=t=>t.trimStart().startsWith("---"),j=t=>Rt(t)?t:Buffer.from(t,"base64").toString(),Ot=async t=>{const e=j(t),r=await et.readKey({armoredKey:e}),{user:n}=await r.getPrimaryUser(),i=r.getFingerprint().toUpperCase(),s=r.getKeyID().toHex().toUpperCase(),g=nt(rt),{name:u,address:a}=g(n.userID?.userID??"")[0],c=r.getCreationTime();return{digest:i,id:s,name:u,email:a,creationTime:c}},Ut=async t=>{const e=T.join(P.tmpdir(),`mnrendra-import-gpg-${L.nanoid()}`),r=y.mkdtempSync(e),n=`${r}/${L.nanoid()}.pgp`,i=j(t);y.writeFileSync(n,i,{mode:384});const s=["--import","--batch","--yes",n],{stdout:g,stderr:u}=await I(s);return u!==""?u:(y.unlinkSync(n),y.rmSync(r),g)},At=async()=>{await b("KILLAGENT")},D=async(t,e)=>{const r=Buffer.from(e,"utf8").toString("hex").toUpperCase();return await b(`PRESET_PASSPHRASE ${t} -1 ${r}`),await b(`KEYINFO ${t}`)},Lt=async(t=[],e={})=>await it("gpg",t,e),Ct=async(t,e)=>{const r=["--batch","--no-tty","--command-fd","0","--edit-key",t],n=Buffer.from(`trust
${e}
y
quit
`);await Lt(r,{input:n})},V="user.signingkey",q="user.name",B="user.email",Y="commit.gpgsign",z="tag.gpgsign",X="push.gpgsign",Kt=async(t,e,r,{scope:n,signUser:i,signCommit:s,signTag:g,signPush:u})=>{o("---------------- Configuring Git -------------------------:");const a={scope:"local",userSigningkey:"",commitGpgsign:!1,tagGpgsign:!1,pushGpgsign:"if-asked",userName:"",userEmail:""},c=n==="global";return a.scope=n,o(`scope           : ${a.scope}`),i&&(await S(V,t,c),a.userSigningkey=await h(V,c),o(`user.signingkey : ${a.userSigningkey}`),await S(q,e,c),a.userName=await h(q,c),o(`user.name       : ${a.userName}`),await S(B,r,c),a.userEmail=await h(B,c),o(`user.email      : ${a.userEmail}`)),s&&(await S(Y,`${s}`,c),a.commitGpgsign=await h(Y,c),o(`commit.gpgsign  : ${a.commitGpgsign}`)),g&&(await S(z,`${g}`,c),a.tagGpgsign=await h(z,c),o(`tag.gpgsign     : ${a.tagGpgsign}`)),u!==!1&&(await S(X,`${u}`,c),a.pushGpgsign=await h(X,c),o(`push.gpgsign    : ${a.pushGpgsign}`)),a},xt=async(t,e,r)=>{const n={gpgHome:"",keygrips:[]};if(r===void 0)return n;const i=await Tt();if(await St(i,ht),n.gpgHome=i,o("---------------- Configuring GnuPG agent -----------------:"),o(`GnuPG home      : ${i}`),e!==void 0){o("---------------- Getting keygrip for fingerprint ---------:");const s=await Nt(e);o(`Presetting passphrase for key ${e} with keygrip ${s}`);const g=await D(s,r);O(g),n.keygrips=[s]}else{o("---------------- Getting keygrips ------------------------:");const s=await kt(t);for(const g of s){o(`Presetting passphrase for ${g}`);const u=await D(g,r);O(u)}n.keygrips=s}return n},Ht=async()=>{const t=await bt(),e=await F(),r={...t,...e};Object.keys(r).forEach(i=>{const s=r[i];if(typeof s!="string"&&s==="")throw new Error(`Invalid GPG ${i} value`,{cause:s})});const n=`${r.gnupg} (libgcrypt ${r.libgcrypt})`;return o("---------------- GnuPG info ------------------------------:"),o(`Version         : ${n}`),o(`Libdir          : ${r.libdir}`),o(`Libexecdir      : ${r.libexecdir}`),o(`Datadir         : ${r.datadir}`),o(`Homedir         : ${r.homedir}`),{...r,version:n}},Mt=async t=>{const{digest:e,id:r,name:n,email:i,creationTime:s}=await Ot(t);return o("---------------- GPG private key info --------------------:"),o(`Fingerprint     : ${e}`),o(`KeyID           : ${r}`),o(`Name            : ${n}`),o(`Email           : ${i}`),o(`CreationTime    : ${s.toUTCString()}`),{digest:e,id:r,name:n,email:i,creationTime:s}},Wt=async(t,e)=>{o("---------------- Importing GPG private key ---------------:");const r=await Ut(t);return o(r),r},Ft=(t,e)=>{o("---------------- Fingerprint to use ----------------------:"),o(e??t)},jt=async(t,e)=>{if(e===void 0)return"";const r=Number(e);if(Number.isNaN(r)||r<1||r>5)throw new Error("Invalid GPG Trust Level value",{cause:e});return o("---------------- Setting key's trust level --------------:"),await Ct(t,e),o(`Trust level set to ${e} for ${t}`),`Trust level set to ${e} for ${t}`},Dt=async t=>{const e=G.cwd();C({...$,cwd:e});const r=T.resolve(t);e!==r&&(o("---------------- Change working directory ----------------:"),G.chdir(r),o(`Using ${r} as working directory...`))},Vt=async(t,e={})=>{try{if(typeof t!="string"||t==="")throw new Error("Invalid GnuPG private key",{cause:t});const r=wt(e),{workdir:n,fingerprint:i,passphrase:s,trustLevel:g}=r;await Dt(n);const u=await Ht(),a=await Mt(t),{digest:c,id:l,name:m,email:v}=a;Ft(c,i);const J=await Wt(t),Q=await xt(c,i,s);await jt(l,g),U("---------------- Successfully set up GPG key -------------:");const Z={scope:r.gitScope,signUser:r.gitSignUser,signCommit:r.gitSignCommit,signTag:r.gitSignTag,signPush:r.gitSignPush},w=await Kt(l,m,v,Z);U("---------------- Successfully configured Git -------------:");const tt={...u,...a,...Q,...w,keyid:l,fingerprint:i??c,log:J,trustLevel:g,gitConfigScope:w.scope,gitUserSigningkey:w.userSigningkey,gitUserName:w.userName,gitUserEmail:w.userEmail,gitCommitGpgsign:w.commitGpgsign,gitTagGpgsign:w.tagGpgsign,gitPushGpgsign:w.pushGpgsign,workdir:G.cwd()};return K(),tt}catch(r){throw K(),r instanceof Error?r:new Error("Unknown error",{cause:r})}},qt=async(t="")=>{if(t.length<=0){O("Primary key fingerprint is not defined. Skipping cleanup.");return}try{o("---------------- Cleaning up GPG key ---------------------:"),o(`Removing key ${t}`),await It(t),o("Killing GnuPG agent"),await At(),U("---------------- Successfully cleaned up GPG key ---------:")}catch(e){const r=e instanceof Error?e.message:"Unknown error";H(r),H(`${e}`)}},E=(t,e={})=>new Promise((r,n)=>{try{R.exec(t,e,(i,s,g)=>{i!=null&&n(i),r({stdout:s,stderr:g})})}catch(i){n(i)}}),d=Object.freeze({WORKDIR:".",GPG_PRIVATE_KEY:void 0,GPG_PASSPHRASE:void 0,GPG_FINGERPRINT:void 0,GPG_TRUST_LEVEL:void 0,GIT_SCOPE:"local",GIT_SIGN_USER:!0,GIT_SIGN_COMMIT:!1,GIT_SIGN_TAG:!1,GIT_SIGN_PUSH:"if-asked",TOKEN:G.env.GITHUB_TOKEN}),p=Object.freeze({WORKDIR:"workdir",GPG_PRIVATE_KEY:"gpg-private-key",GPG_PASSPHRASE:"gpg-passphrase",GPG_FINGERPRINT:"gpg-fingerprint",GPG_TRUST_LEVEL:"gpg-trust-level",GIT_SCOPE:"git-scope",GIT_SIGN_USER:"git-sign-user",GIT_SIGN_COMMIT:"git-sign-commit",GIT_SIGN_TAG:"git-sign-tag",GIT_SIGN_PUSH:"git-sign-push",TOKEN:"token"}),Bt=()=>{const t=f.getInput(p.GPG_FINGERPRINT);if(t===void 0||t==="")return d.GPG_FINGERPRINT;if(typeof t!="string")throw new Error(`Invalid ${p.GPG_FINGERPRINT} input`,{cause:t});return t},Yt=()=>{const t=f.getInput(p.GIT_SCOPE);if(t===void 0||t==="")return d.GIT_SCOPE;if(typeof t!="string"||!["global","local"].includes(t))throw new Error(`Invalid ${p.GIT_SCOPE} input`,{cause:t});return t},zt=()=>{const t=f.getInput(p.GIT_SIGN_COMMIT);if(t===void 0||t==="")return d.GIT_SIGN_COMMIT;if(typeof t=="boolean")return t;switch(t){case"false":return!1;case"true":return!0;default:throw new Error(`Invalid ${p.GIT_SIGN_COMMIT} input`,{cause:t})}},Xt=()=>{const t=f.getInput(p.GIT_SIGN_PUSH);if(t===void 0||t==="")return d.GIT_SIGN_PUSH;if(typeof t=="boolean")return t;switch(t){case"false":return!1;case"true":return!0;case"if-asked":return"if-asked";default:throw new Error(`Invalid ${p.GIT_SIGN_PUSH} input`,{cause:t})}},Jt=()=>{const t=f.getInput(p.GIT_SIGN_TAG);if(t===void 0||t==="")return d.GIT_SIGN_TAG;if(typeof t=="boolean")return t;switch(t){case"false":return!1;case"true":return!0;default:throw new Error(`Invalid ${p.GIT_SIGN_TAG} input`,{cause:t})}},Qt=()=>{const t=f.getInput(p.GIT_SIGN_USER);if(t===void 0||t==="")return d.GIT_SIGN_USER;if(typeof t=="boolean")return t;switch(t){case"false":return!1;case"true":return!0;default:throw new Error(`Invalid ${p.GIT_SIGN_USER} input`,{cause:t})}},Zt=()=>{const t=f.getInput(p.GPG_PASSPHRASE);if(t===void 0||t==="")return d.GPG_PASSPHRASE;if(typeof t!="string")throw new Error(`Invalid ${p.GPG_PASSPHRASE} input`,{cause:t});return t},te=()=>{const t=f.getInput(p.GPG_PRIVATE_KEY);if(t===void 0||t==="")return d.GPG_PRIVATE_KEY;if(typeof t!="string")throw new Error(`Invalid ${p.GPG_PRIVATE_KEY} input`,{cause:t});return t},ee=()=>{const t=f.getInput(p.TOKEN);if(t===void 0||t==="")return d.TOKEN;if(typeof t!="string")throw new Error(`Invalid ${p.TOKEN} input`,{cause:t});return t},re=()=>{const t=f.getInput(p.GPG_TRUST_LEVEL);if(t===void 0||t==="")return d.GPG_TRUST_LEVEL;const e=Number(t);if(Number.isNaN(e)||e<1||e>5)throw new Error(`Invalid ${p.GPG_TRUST_LEVEL} input`,{cause:t});return e},ne=()=>{const t=f.getInput(p.WORKDIR);if(t===void 0||t==="")return d.WORKDIR;if(typeof t!="string")throw new Error(`Invalid ${p.WORKDIR} input`,{cause:t});return t},ie=()=>{const t=Bt(),e=Yt(),r=zt(),n=Xt(),i=Jt(),s=Qt(),g=Zt(),u=te(),a=ee(),c=re(),l=ne();return{fingerprint:t,gitScope:e,gitSignCommit:r,gitSignPush:n,gitSignTag:i,gitSignUser:s,passphrase:g,privateKey:u,token:a,trustLevel:c,workdir:l}},se=async()=>{await E(`git config --global --add safe.directory ${G.cwd()}`);const{workdir:t,privateKey:e,passphrase:r,fingerprint:n,trustLevel:i,gitScope:s,gitSignUser:g,gitSignCommit:u,gitSignTag:a,gitSignPush:c}=ie();let l="";e!==void 0&&(l=(await Vt(e,{workdir:t,passphrase:r,fingerprint:n,trustLevel:i,gitScope:s,gitSignUser:g,gitSignCommit:u,gitSignTag:a,gitSignPush:c,verbose:!0})).digest),await E('echo "tes" >> tes.txt'),await E("git add ."),await E('git commit -S -m "chore: add tes file"'),await E('git tag -s v4.6.0-tes -m "release: v4.6.0-tes"'),await E("git push --follow-tags"),await qt(l)};se().then(t=>{console.log("result:",t)}).catch(t=>{throw t instanceof Error?t:new Error("Unknown error")});
