#!/usr/bin/env node
"use strict";var l=require("node:process"),b=require("node:child_process"),m=require("node:os"),y=require("node:fs"),P=require("node:path"),U=require("nanoid"),Y=require("openpgp"),B=require("addressparser"),G=require("@actions/core");const v=t=>t.replace(/\r/g,"").trim().split(/\n/),T=(t,r=[],e={})=>new Promise((n,i)=>{try{const s=r.length>0?`${t} ${r.join(" ")}`:t;b.exec(s,e,(c,u,a)=>{c!=null&&i(c);const g=u.trim(),f=v(g),w=a.trim(),$=v(w);n({stdout:g,stdoutLines:f,stderr:w,stderrLines:$})})}catch(s){i(s)}}),_={cwd:l.cwd(),verbose:!1},z=t=>{Object.keys(t).forEach(r=>{_[r]=t[r]})},o=t=>{_.verbose&&console.log(t)},X=t=>{if(typeof t=="function")return t;if(typeof t=="object"&&t!==null&&!Array.isArray(t)&&typeof t.default=="function")return t.default;throw new Error("Invalid module")},R=(t,r,e)=>{try{let n=r+t.toString(),i=n.indexOf(m.EOL);for(;i>-1;){const s=n.substring(0,i);typeof e=="function"&&e(s),n=n.substring(i+m.EOL.length),i=n.indexOf(m.EOL)}return n}catch(n){throw n instanceof Error?n:new Error("Unknown error",{cause:n})}},J=(t,r=[],e={})=>new Promise((n,i)=>{try{const s=b.spawn(t,r,e);let c="";s.stdout.on("data",a=>{c=R(a,c)});let u="";s.stderr.on("data",a=>{u=R(a,u)}),s.on("error",a=>{s.removeAllListeners(),i(a)}),s.on("close",a=>{s.removeAllListeners();const g=u.trim(),f=v(g),w=c.trim(),$=v(w);n({code:a,stdout:g,stdoutLines:f,stderr:w,stderrLines:$})}),e.input!==void 0&&s.stdin.end(e.input)}catch(s){i(s)}}),Q=t=>{if(t!==void 0){if(typeof t!="string"||t==="")throw new Error("Invalid fingerprint value",{cause:t});return t}},Z=(t="local")=>{if(typeof t!="string"||!["global","local"].includes(t))throw new Error("Invalid gitScope value",{cause:t});return t},tt=(t=!1)=>{if(typeof t!="boolean")throw new Error("Invalid gitSignCommit value",{cause:t});return t},et=(t="if-asked")=>{if(typeof t!="boolean"&&(typeof t!="string"||t!=="if-asked"))throw new Error("Invalid gitSignPush value",{cause:t});return t},rt=(t=!1)=>{if(typeof t!="boolean")throw new Error("Invalid gitSignTag value",{cause:t});return t},nt=(t=!0)=>{if(typeof t!="boolean")throw new Error("Invalid gitSignUser value",{cause:t});return t},it=t=>{if(t!==void 0){if(typeof t!="string"||t==="")throw new Error("Invalid passphrase value",{cause:t});return t}},st=t=>{if(t===void 0)return;const r=Number(t);if(Number.isNaN(r)||r<1||r>5)throw new Error("Invalid trustLevel value",{cause:t});return t},ot=(t=!1)=>{if(typeof t!="boolean")throw new Error("Invalid verbose value",{cause:t});return t},at=t=>{try{return y.statSync(t).isDirectory()}catch{return!1}},gt=(t=".")=>{if(typeof t!="string"||t==="")throw new Error("Invalid workdir value",{cause:t});if(!at(t))throw new Error(`workdir ${t} is doesn't exist`,{cause:t});return t},ct=t=>{if(typeof t!="object"||t===null||Array.isArray(t))throw new Error("Invalid options value",{cause:t});const r=gt(t.workdir),e=it(t.passphrase),n=Q(t.fingerprint),i=st(t.trustLevel),s=Z(t.gitScope),c=nt(t.gitSignUser),u=tt(t.gitSignCommit),a=rt(t.gitSignTag),g=et(t.gitSignPush),f=ot(t.verbose);return z({..._,verbose:f}),o("---------------- importGPG's options to use -------------:"),o(`workdir         : ${r}`),o(`passphrase      : ${e}`),o(`fingerprint     : ${n}`),o(`trustLevel      : ${i}`),o(`gitScope        : ${s}`),o(`gitSignUser     : ${c}`),o(`gitSignCommit   : ${u}`),o(`gitSignTag      : ${a}`),o(`gitSignPush     : ${g}`),o(`verbose         : ${f}`),{workdir:r,passphrase:e,fingerprint:n,trustLevel:i,gitScope:s,gitSignUser:c,gitSignCommit:u,gitSignTag:a,gitSignPush:g,verbose:f}},O=async(t=[])=>await T("git",t),S=async(t,r=!1)=>{const e=["config","--get"];r&&e.push("--global"),e.push(t);const{stdout:n}=await O(e);return n==="true"?!0:n==="false"?!1:n},E=async(t,r,e=!1)=>{const n=["config"];e&&n.push("--global"),n.push(t,r),await O(n)},ut="gpg-agent.conf",pt={RELOADAGENT:"RELOADAGENT"},A=".gnupg",lt={WIN32:"win32"},ft=`default-cache-ttl 21600
max-cache-ttl 31536000
allow-preset-passphrase
`,N=async t=>{const{stdout:r}=await T(`gpg-connect-agent "${t}" /bye`);return r},Gt=async(t,r)=>{const e=P.join(t,ut);y.writeFileSync(e,r),await N(pt.RELOADAGENT)},h=async(t=[])=>await T("gpg",t),dt=(t,r)=>t.slice(r.length+1).replace("%3a",":").trim(),L=async()=>{const{stdoutLines:t}=await h(["--list-dirs"]),r={libdir:"",libexecdir:"",datadir:"",homedir:""};return t.forEach(e=>{Object.keys(r).forEach(n=>{const i=n;e.startsWith(`${i}:`)&&(r[i]=dt(e,i))})}),Object.keys(r).forEach(e=>{const n=r[e];if(typeof n!="string"||n==="")throw new Error(`Invalid GPG ${e}`,{cause:n})}),r},wt=async()=>{const{GNUPGHOME:t,HOME:r,USERPROFILE:e}=l.env;if(typeof t=="string"&&t!=="")return t;if(typeof r=="string"&&r!=="")return P.join(r,A);if(typeof e=="string"&&e!==""&&m.platform()===lt.WIN32)return P.join(e,A);const{homedir:n}=await L();return n},It=async()=>{const t=await wt();if(t.length===0)throw new Error("Unable to determine GnuPG home directory",{cause:t});return y.existsSync(t)||y.mkdirSync(t,{recursive:!0}),t},yt=(t,r)=>{let e="",n=!1;const i=v(t);for(const s of i){if(s.startsWith("fpr:")&&s.includes(`:${r}:`)){n=!0;continue}if(s.startsWith("grp:")&&n){e=s.replace(/(grp|:)/g,"").trim();break}}return e},St=async t=>{const r=["--batch","--with-colons","--with-keygrip","--list-secret-keys",t],{stdout:e}=await h(r);return yt(e,t)},Et=async t=>{const r=["--batch","--with-colons","--with-keygrip","--list-secret-keys",t],{stdoutLines:e}=await h(r),n=[];return e.forEach(i=>{i.startsWith("grp")&&n.push(i.replace(/(grp|:)/g,"").trim())}),n},k=(t,r)=>t.slice(r.length+1).trim(),$t=async()=>{const t=["--version"],{stdoutLines:r}=await h(t),e={gnupg:"",libgcrypt:""};return r.forEach(n=>{n.startsWith("gpg (GnuPG) ")?e.gnupg=k(n,"gpg (GnuPG)"):n.startsWith("gpg (GnuPG/MacGPG2) ")?e.gnupg=k(n,"gpg (GnuPG/MacGPG2)"):n.startsWith("libgcrypt ")&&(e.libgcrypt=k(n,"libgcrypt"))}),Object.keys(e).forEach(n=>{const i=e[n];if(typeof i!="string"||i==="")throw new Error(`Invalid GPG ${n}`,{cause:i})}),e},mt=t=>t.trimStart().startsWith("---"),C=t=>mt(t)?t:Buffer.from(t,"base64").toString(),vt=async t=>{const r=C(t),e=await Y.readKey({armoredKey:r}),{user:n}=await e.getPrimaryUser(),i=e.getFingerprint().toUpperCase(),s=e.getKeyID().toHex().toUpperCase(),c=X(B),{name:u,address:a}=c(n.userID?.userID??"")[0],g=e.getCreationTime();return{digest:i,id:s,name:u,email:a,creationTime:g}},ht=async t=>{const r=P.join(m.tmpdir(),`mnrendra-import-gpg-${U.nanoid()}`),e=y.mkdtempSync(r),n=`${e}/${U.nanoid()}.pgp`,i=C(t);y.writeFileSync(n,i,{mode:384});const s=["--import","--batch","--yes",n],{stdout:c,stderr:u}=await h(s);return u!==""?u:(y.unlinkSync(n),y.rmSync(e),c)},K=async(t,r)=>{const e=Buffer.from(r,"utf8").toString("hex").toUpperCase();return await N(`PRESET_PASSPHRASE ${t} -1 ${e}`),await N(`KEYINFO ${t}`)},Pt=async(t=[],r={})=>await J("gpg",t,r),Tt=async(t,r)=>{const e=["--batch","--no-tty","--command-fd","0","--edit-key",t],n=Buffer.from(`trust
${r}
y
quit
`);await Pt(e,{input:n})},H="user.signingkey",M="user.name",F="user.email",D="commit.gpgsign",W="tag.gpgsign",j="push.gpgsign",_t=async(t,r,e,{scope:n,signUser:i,signCommit:s,signTag:c,signPush:u})=>{o("---------------- Git Configs -----------------------------:");const a={scope:"local",userSigningkey:"",commitGpgsign:!1,tagGpgsign:!1,pushGpgsign:"if-asked",userName:"",userEmail:""},g=n==="global";return a.scope=n,o(`scope           : ${a.scope}`),i&&(await E(H,t,g),a.userSigningkey=await S(H,g),o(`user.signingkey : ${a.userSigningkey}`),await E(M,r,g),a.userName=await S(M,g),o(`user.name       : ${a.userName}`),await E(F,e,g),a.userEmail=await S(F,g),o(`user.email      : ${a.userEmail}`)),s&&(await E(D,`${s}`,g),a.commitGpgsign=await S(D,g),o(`commit.gpgsign  : ${a.commitGpgsign}`)),c&&(await E(W,`${c}`,g),a.tagGpgsign=await S(W,g),o(`tag.gpgsign     : ${a.tagGpgsign}`)),u!==!1&&(await E(j,`${u}`,g),a.pushGpgsign=await S(j,g),o(`push.gpgsign    : ${a.pushGpgsign}`)),a},Nt=async(t,r,e)=>{const n={gpgHome:"",keygripPairs:[]};if(e===void 0)return n;const i=await It();if(await Gt(i,ft),n.gpgHome=i,o("---------------- Configured GnuPG agent ------------------:"),o(`GnuPG home      : ${i}`),r!==void 0){o("---------------- Getting keygrip for fingerprint ---------:");const s=await St(r);o(`Presetting passphrase for key ${r} with keygrip ${s}`);const c=await K(s,e);n.keygripPairs=[{keygrip:s,keyinfo:c}]}else{o("---------------- Getting keygrips ------------------------:");const s=await Et(t),c=[];for(const u of s){o(`Presetting passphrase for ${u}`);const a=await K(u,e);c.push({keygrip:u,keyinfo:a})}n.keygripPairs=c}return n},kt=async()=>{const t=await $t(),r=await L(),e={...t,...r};Object.keys(e).forEach(i=>{const s=e[i];if(typeof s!="string"&&s==="")throw new Error(`Invalid GPG ${i} value`,{cause:s})});const n=`${e.gnupg} (libgcrypt ${e.libgcrypt})`;return o("---------------- GnuPG info ------------------------------:"),o(`Version         : ${n}`),o(`Libdir          : ${e.libdir}`),o(`Libexecdir      : ${e.libexecdir}`),o(`Datadir         : ${e.datadir}`),o(`Homedir         : ${e.homedir}`),{...e,version:n}},bt=async t=>{const{digest:r,id:e,name:n,email:i,creationTime:s}=await vt(t);return o("---------------- GPG private key info --------------------:"),o(`Fingerprint     : ${r}`),o(`KeyID           : ${e}`),o(`Name            : ${n}`),o(`Email           : ${i}`),o(`CreationTime    : ${s.toUTCString()}`),{digest:r,id:e,name:n,email:i,creationTime:s}},Ut=async(t,r)=>{o("---------------- Importing GPG private key ---------------:");const e=await ht(t);return o(e),e},Rt=(t,r)=>{o("---------------- Fingerprint to use ----------------------:"),o(r??t)},Ot=async(t,r)=>{if(r===void 0)return"";const e=Number(r);if(Number.isNaN(e)||e<1||e>5)throw new Error("Invalid GPG Trust Level value",{cause:r});return o("---------------- Setting key's trust level --------------:"),await Tt(t,r),o(`Trust level set to ${r} for ${t}`),`Trust level set to ${r} for ${t}`},At=(t,r)=>{t!=="."&&(o("---------------- Change working directory ----------------:"),l.chdir(t),o(`Using ${t} as working directory...`))},Lt=async(t,r={})=>{try{if(typeof t!="string"||t==="")throw new Error("Invalid GnuPG private key",{cause:t});const e=ct(r),{workdir:n,fingerprint:i,passphrase:s,trustLevel:c}=e;At(n);const u=await kt(),a=await bt(t),{digest:g,id:f,name:w,email:$}=a;Rt(g,i);const V=await Ut(t),x=await Nt(g,i,s);await Ot(f,c);const q={scope:e.gitScope,signUser:e.gitSignUser,signCommit:e.gitSignCommit,signTag:e.gitSignTag,signPush:e.gitSignPush},I=await _t(f,w,$,q);return{...u,...a,...x,...I,keyId:a.id,fingerprint:a.digest,log:V,trustLevel:c,gitConfigScope:I.scope,gitUserSigningkey:I.userSigningkey,gitUserName:I.userName,gitUserEmail:I.userEmail,gitCommitGpgsign:I.commitGpgsign,gitTagGpgsign:I.tagGpgsign,gitPushGpgsign:I.pushGpgsign}}catch(e){throw e instanceof Error?e:new Error("Unknown error",{cause:e})}},d=Object.freeze({WORKDIR:".",GPG_PRIVATE_KEY:void 0,GPG_PASSPHRASE:void 0,GPG_FINGERPRINT:void 0,GPG_TRUST_LEVEL:void 0,GIT_SCOPE:"local",GIT_SIGN_USER:!0,GIT_SIGN_COMMIT:!1,GIT_SIGN_TAG:!1,GIT_SIGN_PUSH:"if-asked",TOKEN:l.env.GITHUB_TOKEN}),p=Object.freeze({WORKDIR:"workdir",GPG_PRIVATE_KEY:"gpg-private-key",GPG_PASSPHRASE:"gpg-passphrase",GPG_FINGERPRINT:"gpg-fingerprint",GPG_TRUST_LEVEL:"gpg-trust-level",GIT_SCOPE:"git-scope",GIT_SIGN_USER:"git-sign-user",GIT_SIGN_COMMIT:"git-sign-commit",GIT_SIGN_TAG:"git-sign-tag",GIT_SIGN_PUSH:"git-sign-push",TOKEN:"token"}),Ct=()=>{const t=G.getInput(p.GPG_FINGERPRINT);if(t===void 0||t==="")return d.GPG_FINGERPRINT;if(typeof t!="string")throw new Error(`Invalid ${p.GPG_FINGERPRINT} input`,{cause:t});return t},Kt=()=>{const t=G.getInput(p.GIT_SCOPE);if(t===void 0||t==="")return d.GIT_SCOPE;if(typeof t!="string"||!["global","local"].includes(t))throw new Error(`Invalid ${p.GIT_SCOPE} input`,{cause:t});return t},Ht=()=>{const t=G.getInput(p.GIT_SIGN_COMMIT);if(t===void 0||t==="")return d.GIT_SIGN_COMMIT;if(typeof t=="boolean")return t;switch(t){case"false":return!1;case"true":return!0;default:throw new Error(`Invalid ${p.GIT_SIGN_COMMIT} input`,{cause:t})}},Mt=()=>{const t=G.getInput(p.GIT_SIGN_PUSH);if(t===void 0||t==="")return d.GIT_SIGN_PUSH;if(typeof t=="boolean")return t;switch(t){case"false":return!1;case"true":return!0;case"if-asked":return"if-asked";default:throw new Error(`Invalid ${p.GIT_SIGN_PUSH} input`,{cause:t})}},Ft=()=>{const t=G.getInput(p.GIT_SIGN_TAG);if(t===void 0||t==="")return d.GIT_SIGN_TAG;if(typeof t=="boolean")return t;switch(t){case"false":return!1;case"true":return!0;default:throw new Error(`Invalid ${p.GIT_SIGN_TAG} input`,{cause:t})}},Dt=()=>{const t=G.getInput(p.GIT_SIGN_USER);if(t===void 0||t==="")return d.GIT_SIGN_USER;if(typeof t=="boolean")return t;switch(t){case"false":return!1;case"true":return!0;default:throw new Error(`Invalid ${p.GIT_SIGN_USER} input`,{cause:t})}},Wt=()=>{const t=G.getInput(p.GPG_PASSPHRASE);if(t===void 0||t==="")return d.GPG_PASSPHRASE;if(typeof t!="string")throw new Error(`Invalid ${p.GPG_PASSPHRASE} input`,{cause:t});return t},jt=()=>{const t=G.getInput(p.GPG_PRIVATE_KEY);if(t===void 0||t==="")return d.GPG_PRIVATE_KEY;if(typeof t!="string")throw new Error(`Invalid ${p.GPG_PRIVATE_KEY} input`,{cause:t});return t},Vt=()=>{const t=G.getInput(p.TOKEN);if(t===void 0||t==="")return d.TOKEN;if(typeof t!="string")throw new Error(`Invalid ${p.TOKEN} input`,{cause:t});return t},xt=()=>{const t=G.getInput(p.GPG_TRUST_LEVEL);if(t===void 0||t==="")return d.GPG_TRUST_LEVEL;const r=Number(t);if(Number.isNaN(r)||r<1||r>5)throw new Error(`Invalid ${p.GPG_TRUST_LEVEL} input`,{cause:t});return r},qt=()=>{const t=G.getInput(p.WORKDIR);if(t===void 0||t==="")return d.WORKDIR;if(typeof t!="string")throw new Error(`Invalid ${p.WORKDIR} input`,{cause:t});return t},Yt=()=>{const t=Ct(),r=Kt(),e=Ht(),n=Mt(),i=Ft(),s=Dt(),c=Wt(),u=jt(),a=Vt(),g=xt(),f=qt();return{fingerprint:t,gitScope:r,gitSignCommit:e,gitSignPush:n,gitSignTag:i,gitSignUser:s,passphrase:c,privateKey:u,token:a,trustLevel:g,workdir:f}},Bt=async()=>{console.log("-------main-bagong-------");const{workdir:t,privateKey:r,passphrase:e,fingerprint:n,trustLevel:i,gitScope:s,gitSignUser:c,gitSignCommit:u,gitSignTag:a,gitSignPush:g,token:f}=Yt();if(r!==void 0){const w=await Lt(r,{workdir:t,passphrase:e,fingerprint:n,trustLevel:i,gitScope:s,gitSignUser:c,gitSignCommit:u,gitSignTag:a,gitSignPush:g,verbose:!0});console.log("outputs:",w)}console.log("workdir:",t,"|",typeof t,"|",l.env.INPUT_WORKDIR),console.log("privateKey:",r,"|",typeof r,"|",l.env["INPUT_GPG-PRIVATE-KEY"]),console.log("passphrase:",e,"|",typeof e,"|",l.env["INPUT_GPG-PASSPHRASE"]),console.log("fingerprint:",n,"|",typeof n,"|",l.env["INPUT_GPG-FINGERPRINT"]),console.log("trustLevel:",i,"|",typeof i,"|",l.env["INPUT_GPG-TRUST-LEVEL"]),console.log("gitScope:",s,"|",typeof s,"|",l.env["INPUT_GIT-SCOPE"]),console.log("gitSignUser:",c,"|",typeof c,"|",l.env["INPUT_GIT-SIGN-USER"]),console.log("gitSignCommit:",u,"|",typeof u,"|",l.env["INPUT_GIT-SIGN-COMMIT"]),console.log("gitSignTag:",a,"|",typeof a,"|",l.env["INPUT_GIT-SIGN-TAG"]),console.log("gitSignPush:",g,"|",typeof g,"|",l.env["INPUT_GIT-SIGN-PUSH"]),console.log("token:",f,"|",typeof f,"|",l.env.INPUT_TOKEN,l.env.INPUT_TOKEN===l.env.GITHUB_TOKEN)};Bt().then(t=>{console.log("result:",t)}).catch(t=>{throw t instanceof Error?t:new Error("Unknown error")});
